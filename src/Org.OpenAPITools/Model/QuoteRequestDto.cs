/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QuoteRequestDto
    /// </summary>
    [DataContract]
    public partial class QuoteRequestDto :  IEquatable<QuoteRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QuoteRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteRequestDto" /> class.
        /// </summary>
        /// <param name="from">The currency to convert from. (required) (default to &quot;EUR&quot;).</param>
        /// <param name="to">The currency to convert to. (required) (default to &quot;USDC&quot;).</param>
        /// <param name="fromWallet">The ID of the wallet converted from. (required) (default to 3598236M).</param>
        /// <param name="useMinimum">Is converting the minimum allowed amount. (required) (default to false).</param>
        /// <param name="useMaximum">Is converting the max amount of the wallet. (required) (default to false).</param>
        /// <param name="toWallet">The ID of the wallet converted to. (required) (default to 3598514M).</param>
        /// <param name="amountIn">The amount being converted. (required) (default to 10M).</param>
        /// <param name="payInMethod">The type of method in. (required) (default to &quot;wallet&quot;).</param>
        /// <param name="payOutMethod">The type of method out. (required) (default to &quot;wallet&quot;).</param>
        public QuoteRequestDto(string from = "EUR", string to = "USDC", decimal fromWallet = 3598236M, bool useMinimum = false, bool useMaximum = false, decimal toWallet = 3598514M, decimal amountIn = 10M, string payInMethod = "wallet", string payOutMethod = "wallet")
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.From = from;
            }

            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.To = to;
            }

            // to ensure "fromWallet" is required (not null)
            if (fromWallet == null)
            {
                throw new InvalidDataException("fromWallet is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.FromWallet = fromWallet;
            }

            // to ensure "useMinimum" is required (not null)
            if (useMinimum == null)
            {
                throw new InvalidDataException("useMinimum is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.UseMinimum = useMinimum;
            }

            // to ensure "useMaximum" is required (not null)
            if (useMaximum == null)
            {
                throw new InvalidDataException("useMaximum is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.UseMaximum = useMaximum;
            }

            // to ensure "toWallet" is required (not null)
            if (toWallet == null)
            {
                throw new InvalidDataException("toWallet is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.ToWallet = toWallet;
            }

            // to ensure "amountIn" is required (not null)
            if (amountIn == null)
            {
                throw new InvalidDataException("amountIn is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.AmountIn = amountIn;
            }

            // to ensure "payInMethod" is required (not null)
            if (payInMethod == null)
            {
                throw new InvalidDataException("payInMethod is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.PayInMethod = payInMethod;
            }

            // to ensure "payOutMethod" is required (not null)
            if (payOutMethod == null)
            {
                throw new InvalidDataException("payOutMethod is a required property for QuoteRequestDto and cannot be null");
            }
            else
            {
                this.PayOutMethod = payOutMethod;
            }

        }

        /// <summary>
        /// The currency to convert from.
        /// </summary>
        /// <value>The currency to convert from.</value>
        [DataMember(Name="from", EmitDefaultValue=true)]
        public string From { get; set; }

        /// <summary>
        /// The currency to convert to.
        /// </summary>
        /// <value>The currency to convert to.</value>
        [DataMember(Name="to", EmitDefaultValue=true)]
        public string To { get; set; }

        /// <summary>
        /// The ID of the wallet converted from.
        /// </summary>
        /// <value>The ID of the wallet converted from.</value>
        [DataMember(Name="fromWallet", EmitDefaultValue=true)]
        public decimal FromWallet { get; set; }

        /// <summary>
        /// Is converting the minimum allowed amount.
        /// </summary>
        /// <value>Is converting the minimum allowed amount.</value>
        [DataMember(Name="useMinimum", EmitDefaultValue=true)]
        public bool UseMinimum { get; set; }

        /// <summary>
        /// Is converting the max amount of the wallet.
        /// </summary>
        /// <value>Is converting the max amount of the wallet.</value>
        [DataMember(Name="useMaximum", EmitDefaultValue=true)]
        public bool UseMaximum { get; set; }

        /// <summary>
        /// The ID of the wallet converted to.
        /// </summary>
        /// <value>The ID of the wallet converted to.</value>
        [DataMember(Name="toWallet", EmitDefaultValue=true)]
        public decimal ToWallet { get; set; }

        /// <summary>
        /// The amount being converted.
        /// </summary>
        /// <value>The amount being converted.</value>
        [DataMember(Name="amountIn", EmitDefaultValue=true)]
        public decimal AmountIn { get; set; }

        /// <summary>
        /// The type of method in.
        /// </summary>
        /// <value>The type of method in.</value>
        [DataMember(Name="payInMethod", EmitDefaultValue=true)]
        public string PayInMethod { get; set; }

        /// <summary>
        /// The type of method out.
        /// </summary>
        /// <value>The type of method out.</value>
        [DataMember(Name="payOutMethod", EmitDefaultValue=true)]
        public string PayOutMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteRequestDto {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  FromWallet: ").Append(FromWallet).Append("\n");
            sb.Append("  UseMinimum: ").Append(UseMinimum).Append("\n");
            sb.Append("  UseMaximum: ").Append(UseMaximum).Append("\n");
            sb.Append("  ToWallet: ").Append(ToWallet).Append("\n");
            sb.Append("  AmountIn: ").Append(AmountIn).Append("\n");
            sb.Append("  PayInMethod: ").Append(PayInMethod).Append("\n");
            sb.Append("  PayOutMethod: ").Append(PayOutMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteRequestDto);
        }

        /// <summary>
        /// Returns true if QuoteRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteRequestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.FromWallet == input.FromWallet ||
                    (this.FromWallet != null &&
                    this.FromWallet.Equals(input.FromWallet))
                ) && 
                (
                    this.UseMinimum == input.UseMinimum ||
                    (this.UseMinimum != null &&
                    this.UseMinimum.Equals(input.UseMinimum))
                ) && 
                (
                    this.UseMaximum == input.UseMaximum ||
                    (this.UseMaximum != null &&
                    this.UseMaximum.Equals(input.UseMaximum))
                ) && 
                (
                    this.ToWallet == input.ToWallet ||
                    (this.ToWallet != null &&
                    this.ToWallet.Equals(input.ToWallet))
                ) && 
                (
                    this.AmountIn == input.AmountIn ||
                    (this.AmountIn != null &&
                    this.AmountIn.Equals(input.AmountIn))
                ) && 
                (
                    this.PayInMethod == input.PayInMethod ||
                    (this.PayInMethod != null &&
                    this.PayInMethod.Equals(input.PayInMethod))
                ) && 
                (
                    this.PayOutMethod == input.PayOutMethod ||
                    (this.PayOutMethod != null &&
                    this.PayOutMethod.Equals(input.PayOutMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.FromWallet != null)
                    hashCode = hashCode * 59 + this.FromWallet.GetHashCode();
                if (this.UseMinimum != null)
                    hashCode = hashCode * 59 + this.UseMinimum.GetHashCode();
                if (this.UseMaximum != null)
                    hashCode = hashCode * 59 + this.UseMaximum.GetHashCode();
                if (this.ToWallet != null)
                    hashCode = hashCode * 59 + this.ToWallet.GetHashCode();
                if (this.AmountIn != null)
                    hashCode = hashCode * 59 + this.AmountIn.GetHashCode();
                if (this.PayInMethod != null)
                    hashCode = hashCode * 59 + this.PayInMethod.GetHashCode();
                if (this.PayOutMethod != null)
                    hashCode = hashCode * 59 + this.PayOutMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
