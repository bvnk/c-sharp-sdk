/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AcceptedQuote
    /// </summary>
    [DataContract]
    public partial class AcceptedQuote :  IEquatable<AcceptedQuote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcceptedQuote" /> class.
        /// </summary>
        /// <param name="quote">quote.</param>
        /// <param name="payInInstruction">payInInstruction.</param>
        public AcceptedQuote(Quote quote = default(Quote), PayInInstruction payInInstruction = default(PayInInstruction))
        {
            this.Quote = quote;
            this.PayInInstruction = payInInstruction;
        }

        /// <summary>
        /// Gets or Sets Quote
        /// </summary>
        [DataMember(Name="quote", EmitDefaultValue=false)]
        public Quote Quote { get; set; }

        /// <summary>
        /// Gets or Sets PayInInstruction
        /// </summary>
        [DataMember(Name="payInInstruction", EmitDefaultValue=false)]
        public PayInInstruction PayInInstruction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AcceptedQuote {\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("  PayInInstruction: ").Append(PayInInstruction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcceptedQuote);
        }

        /// <summary>
        /// Returns true if AcceptedQuote instances are equal
        /// </summary>
        /// <param name="input">Instance of AcceptedQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcceptedQuote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                ) && 
                (
                    this.PayInInstruction == input.PayInInstruction ||
                    (this.PayInInstruction != null &&
                    this.PayInInstruction.Equals(input.PayInInstruction))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                if (this.PayInInstruction != null)
                    hashCode = hashCode * 59 + this.PayInInstruction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
