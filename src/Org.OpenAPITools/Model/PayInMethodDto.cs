/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PayInMethodDto
    /// </summary>
    [DataContract]
    public partial class PayInMethodDto :  IEquatable<PayInMethodDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayInMethodDto" /> class.
        /// </summary>
        /// <param name="id">The ID fo the pay in method..</param>
        /// <param name="code">The code of the payin..</param>
        /// <param name="settlementCurrency">The settlement currency of the pay in..</param>
        /// <param name="requestedCurrency">The requested currency of the pay in..</param>
        /// <param name="estimatedExchangeRate">The estimated exchange rate of the pay in..</param>
        /// <param name="accountMethods">accountMethods.</param>
        public PayInMethodDto(long id = default(long), string code = default(string), string settlementCurrency = default(string), string requestedCurrency = default(string), decimal estimatedExchangeRate = default(decimal), List<AccountMethodDto> accountMethods = default(List<AccountMethodDto>))
        {
            this.Id = id;
            this.Code = code;
            this.SettlementCurrency = settlementCurrency;
            this.RequestedCurrency = requestedCurrency;
            this.EstimatedExchangeRate = estimatedExchangeRate;
            this.AccountMethods = accountMethods;
        }

        /// <summary>
        /// The ID fo the pay in method.
        /// </summary>
        /// <value>The ID fo the pay in method.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// The code of the payin.
        /// </summary>
        /// <value>The code of the payin.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The settlement currency of the pay in.
        /// </summary>
        /// <value>The settlement currency of the pay in.</value>
        [DataMember(Name="settlementCurrency", EmitDefaultValue=false)]
        public string SettlementCurrency { get; set; }

        /// <summary>
        /// The requested currency of the pay in.
        /// </summary>
        /// <value>The requested currency of the pay in.</value>
        [DataMember(Name="requestedCurrency", EmitDefaultValue=false)]
        public string RequestedCurrency { get; set; }

        /// <summary>
        /// The estimated exchange rate of the pay in.
        /// </summary>
        /// <value>The estimated exchange rate of the pay in.</value>
        [DataMember(Name="estimatedExchangeRate", EmitDefaultValue=false)]
        public decimal EstimatedExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets AccountMethods
        /// </summary>
        [DataMember(Name="accountMethods", EmitDefaultValue=false)]
        public List<AccountMethodDto> AccountMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayInMethodDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("  RequestedCurrency: ").Append(RequestedCurrency).Append("\n");
            sb.Append("  EstimatedExchangeRate: ").Append(EstimatedExchangeRate).Append("\n");
            sb.Append("  AccountMethods: ").Append(AccountMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayInMethodDto);
        }

        /// <summary>
        /// Returns true if PayInMethodDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PayInMethodDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayInMethodDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.SettlementCurrency == input.SettlementCurrency ||
                    (this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(input.SettlementCurrency))
                ) && 
                (
                    this.RequestedCurrency == input.RequestedCurrency ||
                    (this.RequestedCurrency != null &&
                    this.RequestedCurrency.Equals(input.RequestedCurrency))
                ) && 
                (
                    this.EstimatedExchangeRate == input.EstimatedExchangeRate ||
                    (this.EstimatedExchangeRate != null &&
                    this.EstimatedExchangeRate.Equals(input.EstimatedExchangeRate))
                ) && 
                (
                    this.AccountMethods == input.AccountMethods ||
                    this.AccountMethods != null &&
                    input.AccountMethods != null &&
                    this.AccountMethods.SequenceEqual(input.AccountMethods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.SettlementCurrency != null)
                    hashCode = hashCode * 59 + this.SettlementCurrency.GetHashCode();
                if (this.RequestedCurrency != null)
                    hashCode = hashCode * 59 + this.RequestedCurrency.GetHashCode();
                if (this.EstimatedExchangeRate != null)
                    hashCode = hashCode * 59 + this.EstimatedExchangeRate.GetHashCode();
                if (this.AccountMethods != null)
                    hashCode = hashCode * 59 + this.AccountMethods.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
