/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MerchantChannelPayment
    /// </summary>
    [DataContract]
    public partial class MerchantChannelPayment :  IEquatable<MerchantChannelPayment>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DETECTED for value: DETECTED
            /// </summary>
            [EnumMember(Value = "DETECTED")]
            DETECTED = 1,

            /// <summary>
            /// Enum COMPLETE for value: COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETE = 2,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 3

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantChannelPayment" /> class.
        /// </summary>
        /// <param name="channelId">channelId.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="merchantDisplayName">merchantDisplayName.</param>
        /// <param name="reference">reference.</param>
        /// <param name="dateCreated">dateCreated (default to 0).</param>
        /// <param name="lastUpdated">lastUpdated (default to 0).</param>
        /// <param name="status">status.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="hash">hash.</param>
        /// <param name="address">address.</param>
        /// <param name="tag">tag.</param>
        /// <param name="paidCurrency">paidCurrency.</param>
        /// <param name="displayCurrency">displayCurrency.</param>
        /// <param name="walletCurrency">walletCurrency.</param>
        /// <param name="feeCurrency">feeCurrency.</param>
        /// <param name="paidAmount">paidAmount (default to 0M).</param>
        /// <param name="displayAmount">displayAmount (default to 0M).</param>
        /// <param name="walletAmount">walletAmount (default to 0M).</param>
        /// <param name="feeAmount">feeAmount (default to 0M).</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        /// <param name="displayRate">displayRate.</param>
        /// <param name="risk">risk.</param>
        /// <param name="sources">sources.</param>
        /// <param name="networkFee">networkFee.</param>
        public MerchantChannelPayment(string channelId = default(string), string merchantId = default(string), string merchantDisplayName = default(string), string reference = default(string), long dateCreated = 0, long lastUpdated = 0, StatusEnum? status = default(StatusEnum?), string uuid = default(string), string hash = default(string), string address = default(string), string tag = default(string), string paidCurrency = default(string), string displayCurrency = default(string), string walletCurrency = default(string), string feeCurrency = default(string), decimal paidAmount = 0M, decimal displayAmount = 0M, decimal walletAmount = 0M, decimal feeAmount = 0M, ExchangeRateDto exchangeRate = default(ExchangeRateDto), ExchangeRateDto displayRate = default(ExchangeRateDto), ExchangeRateDto risk = default(ExchangeRateDto), List<string> sources = default(List<string>), NetworkFee networkFee = default(NetworkFee))
        {
            this.ChannelId = channelId;
            this.MerchantId = merchantId;
            this.MerchantDisplayName = merchantDisplayName;
            this.Reference = reference;
            // use default value if no "dateCreated" provided
            if (dateCreated == null)
            {
                this.DateCreated = 0;
            }
            else
            {
                this.DateCreated = dateCreated;
            }
            // use default value if no "lastUpdated" provided
            if (lastUpdated == null)
            {
                this.LastUpdated = 0;
            }
            else
            {
                this.LastUpdated = lastUpdated;
            }
            this.Status = status;
            this.Uuid = uuid;
            this.Hash = hash;
            this.Address = address;
            this.Tag = tag;
            this.PaidCurrency = paidCurrency;
            this.DisplayCurrency = displayCurrency;
            this.WalletCurrency = walletCurrency;
            this.FeeCurrency = feeCurrency;
            // use default value if no "paidAmount" provided
            if (paidAmount == null)
            {
                this.PaidAmount = 0M;
            }
            else
            {
                this.PaidAmount = paidAmount;
            }
            // use default value if no "displayAmount" provided
            if (displayAmount == null)
            {
                this.DisplayAmount = 0M;
            }
            else
            {
                this.DisplayAmount = displayAmount;
            }
            // use default value if no "walletAmount" provided
            if (walletAmount == null)
            {
                this.WalletAmount = 0M;
            }
            else
            {
                this.WalletAmount = walletAmount;
            }
            // use default value if no "feeAmount" provided
            if (feeAmount == null)
            {
                this.FeeAmount = 0M;
            }
            else
            {
                this.FeeAmount = feeAmount;
            }
            this.ExchangeRate = exchangeRate;
            this.DisplayRate = displayRate;
            this.Risk = risk;
            this.Sources = sources;
            this.NetworkFee = networkFee;
        }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channelId", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantDisplayName
        /// </summary>
        [DataMember(Name="merchantDisplayName", EmitDefaultValue=false)]
        public string MerchantDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public long DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public long LastUpdated { get; set; }


        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets PaidCurrency
        /// </summary>
        [DataMember(Name="paidCurrency", EmitDefaultValue=false)]
        public string PaidCurrency { get; set; }

        /// <summary>
        /// Gets or Sets DisplayCurrency
        /// </summary>
        [DataMember(Name="displayCurrency", EmitDefaultValue=false)]
        public string DisplayCurrency { get; set; }

        /// <summary>
        /// Gets or Sets WalletCurrency
        /// </summary>
        [DataMember(Name="walletCurrency", EmitDefaultValue=false)]
        public string WalletCurrency { get; set; }

        /// <summary>
        /// Gets or Sets FeeCurrency
        /// </summary>
        [DataMember(Name="feeCurrency", EmitDefaultValue=false)]
        public string FeeCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PaidAmount
        /// </summary>
        [DataMember(Name="paidAmount", EmitDefaultValue=false)]
        public decimal PaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets DisplayAmount
        /// </summary>
        [DataMember(Name="displayAmount", EmitDefaultValue=false)]
        public decimal DisplayAmount { get; set; }

        /// <summary>
        /// Gets or Sets WalletAmount
        /// </summary>
        [DataMember(Name="walletAmount", EmitDefaultValue=false)]
        public decimal WalletAmount { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmount
        /// </summary>
        [DataMember(Name="feeAmount", EmitDefaultValue=false)]
        public decimal FeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public ExchangeRateDto ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets DisplayRate
        /// </summary>
        [DataMember(Name="displayRate", EmitDefaultValue=false)]
        public ExchangeRateDto DisplayRate { get; set; }

        /// <summary>
        /// Gets or Sets Risk
        /// </summary>
        [DataMember(Name="risk", EmitDefaultValue=false)]
        public ExchangeRateDto Risk { get; set; }

        /// <summary>
        /// Gets or Sets Sources
        /// </summary>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        public List<string> Sources { get; set; }

        /// <summary>
        /// Gets or Sets NetworkFee
        /// </summary>
        [DataMember(Name="networkFee", EmitDefaultValue=false)]
        public NetworkFee NetworkFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantChannelPayment {\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  MerchantDisplayName: ").Append(MerchantDisplayName).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  PaidCurrency: ").Append(PaidCurrency).Append("\n");
            sb.Append("  DisplayCurrency: ").Append(DisplayCurrency).Append("\n");
            sb.Append("  WalletCurrency: ").Append(WalletCurrency).Append("\n");
            sb.Append("  FeeCurrency: ").Append(FeeCurrency).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  DisplayAmount: ").Append(DisplayAmount).Append("\n");
            sb.Append("  WalletAmount: ").Append(WalletAmount).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  DisplayRate: ").Append(DisplayRate).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  NetworkFee: ").Append(NetworkFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantChannelPayment);
        }

        /// <summary>
        /// Returns true if MerchantChannelPayment instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantChannelPayment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantChannelPayment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.MerchantDisplayName == input.MerchantDisplayName ||
                    (this.MerchantDisplayName != null &&
                    this.MerchantDisplayName.Equals(input.MerchantDisplayName))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.PaidCurrency == input.PaidCurrency ||
                    (this.PaidCurrency != null &&
                    this.PaidCurrency.Equals(input.PaidCurrency))
                ) && 
                (
                    this.DisplayCurrency == input.DisplayCurrency ||
                    (this.DisplayCurrency != null &&
                    this.DisplayCurrency.Equals(input.DisplayCurrency))
                ) && 
                (
                    this.WalletCurrency == input.WalletCurrency ||
                    (this.WalletCurrency != null &&
                    this.WalletCurrency.Equals(input.WalletCurrency))
                ) && 
                (
                    this.FeeCurrency == input.FeeCurrency ||
                    (this.FeeCurrency != null &&
                    this.FeeCurrency.Equals(input.FeeCurrency))
                ) && 
                (
                    this.PaidAmount == input.PaidAmount ||
                    (this.PaidAmount != null &&
                    this.PaidAmount.Equals(input.PaidAmount))
                ) && 
                (
                    this.DisplayAmount == input.DisplayAmount ||
                    (this.DisplayAmount != null &&
                    this.DisplayAmount.Equals(input.DisplayAmount))
                ) && 
                (
                    this.WalletAmount == input.WalletAmount ||
                    (this.WalletAmount != null &&
                    this.WalletAmount.Equals(input.WalletAmount))
                ) && 
                (
                    this.FeeAmount == input.FeeAmount ||
                    (this.FeeAmount != null &&
                    this.FeeAmount.Equals(input.FeeAmount))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.DisplayRate == input.DisplayRate ||
                    (this.DisplayRate != null &&
                    this.DisplayRate.Equals(input.DisplayRate))
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    input.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                ) && 
                (
                    this.NetworkFee == input.NetworkFee ||
                    (this.NetworkFee != null &&
                    this.NetworkFee.Equals(input.NetworkFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.MerchantDisplayName != null)
                    hashCode = hashCode * 59 + this.MerchantDisplayName.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.PaidCurrency != null)
                    hashCode = hashCode * 59 + this.PaidCurrency.GetHashCode();
                if (this.DisplayCurrency != null)
                    hashCode = hashCode * 59 + this.DisplayCurrency.GetHashCode();
                if (this.WalletCurrency != null)
                    hashCode = hashCode * 59 + this.WalletCurrency.GetHashCode();
                if (this.FeeCurrency != null)
                    hashCode = hashCode * 59 + this.FeeCurrency.GetHashCode();
                if (this.PaidAmount != null)
                    hashCode = hashCode * 59 + this.PaidAmount.GetHashCode();
                if (this.DisplayAmount != null)
                    hashCode = hashCode * 59 + this.DisplayAmount.GetHashCode();
                if (this.WalletAmount != null)
                    hashCode = hashCode * 59 + this.WalletAmount.GetHashCode();
                if (this.FeeAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmount.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.DisplayRate != null)
                    hashCode = hashCode * 59 + this.DisplayRate.GetHashCode();
                if (this.Risk != null)
                    hashCode = hashCode * 59 + this.Risk.GetHashCode();
                if (this.Sources != null)
                    hashCode = hashCode * 59 + this.Sources.GetHashCode();
                if (this.NetworkFee != null)
                    hashCode = hashCode * 59 + this.NetworkFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
