/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Currency
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="depositFee">depositFee.</param>
        /// <param name="fiat">fiat (default to false).</param>
        /// <param name="icon">icon.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="options">options.</param>
        /// <param name="pricePrecision">pricePrecision (default to 5).</param>
        /// <param name="protocols">protocols.</param>
        /// <param name="quantityPrecision">quantityPrecision (default to 5).</param>
        /// <param name="supportsDeposits">supportsDeposits (default to false).</param>
        /// <param name="supportsWithdrawals">supportsWithdrawals (default to false).</param>
        /// <param name="withdrawalFee">withdrawalFee.</param>
        /// <param name="withdrawalParameters">withdrawalParameters.</param>
        public Currency(string code = default(string), decimal depositFee = default(decimal), bool fiat = false, string icon = default(string), long id = default(long), string name = default(string), CurrencyOptions options = default(CurrencyOptions), int pricePrecision = 5, List<CurrencyProtocol> protocols = default(List<CurrencyProtocol>), int quantityPrecision = 5, bool supportsDeposits = false, bool supportsWithdrawals = false, decimal withdrawalFee = default(decimal), List<ExternalCurrencyWithdrawalParameter> withdrawalParameters = default(List<ExternalCurrencyWithdrawalParameter>))
        {
            this.Code = code;
            this.DepositFee = depositFee;
            // use default value if no "fiat" provided
            if (fiat == null)
            {
                this.Fiat = false;
            }
            else
            {
                this.Fiat = fiat;
            }
            this.Icon = icon;
            this.Id = id;
            this.Name = name;
            this.Options = options;
            // use default value if no "pricePrecision" provided
            if (pricePrecision == null)
            {
                this.PricePrecision = 5;
            }
            else
            {
                this.PricePrecision = pricePrecision;
            }
            this.Protocols = protocols;
            // use default value if no "quantityPrecision" provided
            if (quantityPrecision == null)
            {
                this.QuantityPrecision = 5;
            }
            else
            {
                this.QuantityPrecision = quantityPrecision;
            }
            // use default value if no "supportsDeposits" provided
            if (supportsDeposits == null)
            {
                this.SupportsDeposits = false;
            }
            else
            {
                this.SupportsDeposits = supportsDeposits;
            }
            // use default value if no "supportsWithdrawals" provided
            if (supportsWithdrawals == null)
            {
                this.SupportsWithdrawals = false;
            }
            else
            {
                this.SupportsWithdrawals = supportsWithdrawals;
            }
            this.WithdrawalFee = withdrawalFee;
            this.WithdrawalParameters = withdrawalParameters;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets DepositFee
        /// </summary>
        [DataMember(Name="depositFee", EmitDefaultValue=false)]
        public decimal DepositFee { get; set; }

        /// <summary>
        /// Gets or Sets Fiat
        /// </summary>
        [DataMember(Name="fiat", EmitDefaultValue=false)]
        public bool Fiat { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public CurrencyOptions Options { get; set; }

        /// <summary>
        /// Gets or Sets PricePrecision
        /// </summary>
        [DataMember(Name="pricePrecision", EmitDefaultValue=false)]
        public int PricePrecision { get; set; }

        /// <summary>
        /// Gets or Sets Protocols
        /// </summary>
        [DataMember(Name="protocols", EmitDefaultValue=false)]
        public List<CurrencyProtocol> Protocols { get; set; }

        /// <summary>
        /// Gets or Sets QuantityPrecision
        /// </summary>
        [DataMember(Name="quantityPrecision", EmitDefaultValue=false)]
        public int QuantityPrecision { get; set; }

        /// <summary>
        /// Gets or Sets SupportsDeposits
        /// </summary>
        [DataMember(Name="supportsDeposits", EmitDefaultValue=false)]
        public bool SupportsDeposits { get; set; }

        /// <summary>
        /// Gets or Sets SupportsWithdrawals
        /// </summary>
        [DataMember(Name="supportsWithdrawals", EmitDefaultValue=false)]
        public bool SupportsWithdrawals { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalFee
        /// </summary>
        [DataMember(Name="withdrawalFee", EmitDefaultValue=false)]
        public decimal WithdrawalFee { get; set; }

        /// <summary>
        /// Gets or Sets WithdrawalParameters
        /// </summary>
        [DataMember(Name="withdrawalParameters", EmitDefaultValue=false)]
        public List<ExternalCurrencyWithdrawalParameter> WithdrawalParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DepositFee: ").Append(DepositFee).Append("\n");
            sb.Append("  Fiat: ").Append(Fiat).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  PricePrecision: ").Append(PricePrecision).Append("\n");
            sb.Append("  Protocols: ").Append(Protocols).Append("\n");
            sb.Append("  QuantityPrecision: ").Append(QuantityPrecision).Append("\n");
            sb.Append("  SupportsDeposits: ").Append(SupportsDeposits).Append("\n");
            sb.Append("  SupportsWithdrawals: ").Append(SupportsWithdrawals).Append("\n");
            sb.Append("  WithdrawalFee: ").Append(WithdrawalFee).Append("\n");
            sb.Append("  WithdrawalParameters: ").Append(WithdrawalParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currency);
        }

        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DepositFee == input.DepositFee ||
                    (this.DepositFee != null &&
                    this.DepositFee.Equals(input.DepositFee))
                ) && 
                (
                    this.Fiat == input.Fiat ||
                    (this.Fiat != null &&
                    this.Fiat.Equals(input.Fiat))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.PricePrecision == input.PricePrecision ||
                    (this.PricePrecision != null &&
                    this.PricePrecision.Equals(input.PricePrecision))
                ) && 
                (
                    this.Protocols == input.Protocols ||
                    this.Protocols != null &&
                    input.Protocols != null &&
                    this.Protocols.SequenceEqual(input.Protocols)
                ) && 
                (
                    this.QuantityPrecision == input.QuantityPrecision ||
                    (this.QuantityPrecision != null &&
                    this.QuantityPrecision.Equals(input.QuantityPrecision))
                ) && 
                (
                    this.SupportsDeposits == input.SupportsDeposits ||
                    (this.SupportsDeposits != null &&
                    this.SupportsDeposits.Equals(input.SupportsDeposits))
                ) && 
                (
                    this.SupportsWithdrawals == input.SupportsWithdrawals ||
                    (this.SupportsWithdrawals != null &&
                    this.SupportsWithdrawals.Equals(input.SupportsWithdrawals))
                ) && 
                (
                    this.WithdrawalFee == input.WithdrawalFee ||
                    (this.WithdrawalFee != null &&
                    this.WithdrawalFee.Equals(input.WithdrawalFee))
                ) && 
                (
                    this.WithdrawalParameters == input.WithdrawalParameters ||
                    this.WithdrawalParameters != null &&
                    input.WithdrawalParameters != null &&
                    this.WithdrawalParameters.SequenceEqual(input.WithdrawalParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.DepositFee != null)
                    hashCode = hashCode * 59 + this.DepositFee.GetHashCode();
                if (this.Fiat != null)
                    hashCode = hashCode * 59 + this.Fiat.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.PricePrecision != null)
                    hashCode = hashCode * 59 + this.PricePrecision.GetHashCode();
                if (this.Protocols != null)
                    hashCode = hashCode * 59 + this.Protocols.GetHashCode();
                if (this.QuantityPrecision != null)
                    hashCode = hashCode * 59 + this.QuantityPrecision.GetHashCode();
                if (this.SupportsDeposits != null)
                    hashCode = hashCode * 59 + this.SupportsDeposits.GetHashCode();
                if (this.SupportsWithdrawals != null)
                    hashCode = hashCode * 59 + this.SupportsWithdrawals.GetHashCode();
                if (this.WithdrawalFee != null)
                    hashCode = hashCode * 59 + this.WithdrawalFee.GetHashCode();
                if (this.WithdrawalParameters != null)
                    hashCode = hashCode * 59 + this.WithdrawalParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
