/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NetworkFee
    /// </summary>
    [DataContract]
    public partial class NetworkFee :  IEquatable<NetworkFee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkFee" /> class.
        /// </summary>
        /// <param name="paidCurrency">paidCurrency.</param>
        /// <param name="paidAmount">paidAmount.</param>
        /// <param name="displayCurrency">displayCurrency.</param>
        /// <param name="displayAmount">displayAmount.</param>
        public NetworkFee(string paidCurrency = default(string), decimal paidAmount = default(decimal), string displayCurrency = default(string), decimal displayAmount = default(decimal))
        {
            this.PaidCurrency = paidCurrency;
            this.PaidAmount = paidAmount;
            this.DisplayCurrency = displayCurrency;
            this.DisplayAmount = displayAmount;
        }

        /// <summary>
        /// Gets or Sets PaidCurrency
        /// </summary>
        [DataMember(Name="paidCurrency", EmitDefaultValue=false)]
        public string PaidCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PaidAmount
        /// </summary>
        [DataMember(Name="paidAmount", EmitDefaultValue=false)]
        public decimal PaidAmount { get; set; }

        /// <summary>
        /// Gets or Sets DisplayCurrency
        /// </summary>
        [DataMember(Name="displayCurrency", EmitDefaultValue=false)]
        public string DisplayCurrency { get; set; }

        /// <summary>
        /// Gets or Sets DisplayAmount
        /// </summary>
        [DataMember(Name="displayAmount", EmitDefaultValue=false)]
        public decimal DisplayAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkFee {\n");
            sb.Append("  PaidCurrency: ").Append(PaidCurrency).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  DisplayCurrency: ").Append(DisplayCurrency).Append("\n");
            sb.Append("  DisplayAmount: ").Append(DisplayAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkFee);
        }

        /// <summary>
        /// Returns true if NetworkFee instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkFee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkFee input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaidCurrency == input.PaidCurrency ||
                    (this.PaidCurrency != null &&
                    this.PaidCurrency.Equals(input.PaidCurrency))
                ) && 
                (
                    this.PaidAmount == input.PaidAmount ||
                    (this.PaidAmount != null &&
                    this.PaidAmount.Equals(input.PaidAmount))
                ) && 
                (
                    this.DisplayCurrency == input.DisplayCurrency ||
                    (this.DisplayCurrency != null &&
                    this.DisplayCurrency.Equals(input.DisplayCurrency))
                ) && 
                (
                    this.DisplayAmount == input.DisplayAmount ||
                    (this.DisplayAmount != null &&
                    this.DisplayAmount.Equals(input.DisplayAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaidCurrency != null)
                    hashCode = hashCode * 59 + this.PaidCurrency.GetHashCode();
                if (this.PaidAmount != null)
                    hashCode = hashCode * 59 + this.PaidAmount.GetHashCode();
                if (this.DisplayCurrency != null)
                    hashCode = hashCode * 59 + this.DisplayCurrency.GetHashCode();
                if (this.DisplayAmount != null)
                    hashCode = hashCode * 59 + this.DisplayAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
