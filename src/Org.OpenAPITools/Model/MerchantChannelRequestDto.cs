/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MerchantChannelRequestDto
    /// </summary>
    [DataContract]
    public partial class MerchantChannelRequestDto :  IEquatable<MerchantChannelRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantChannelRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantChannelRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantChannelRequestDto" /> class.
        /// </summary>
        /// <param name="merchantId">The merchant ID that you are creating the channel on. (required) (default to &quot;0a12a214-1619-43fa-9be1-0029f6a440a0&quot;).</param>
        /// <param name="payCurrency">The cryptocurrency code that the channel will operate on. (required) (default to &quot;ETH&quot;).</param>
        /// <param name="displayCurrency">The currency which pricing will be displayed to the end user in, can be the same as payCurrency, or can be different. (required) (default to &quot;EUR&quot;).</param>
        /// <param name="reference">An external reference for the channel that your customer will see. (required) (default to &quot;c1b933d5-3354-4f83-a05f-0b53f1be85f2&quot;).</param>
        public MerchantChannelRequestDto(string merchantId = "0a12a214-1619-43fa-9be1-0029f6a440a0", string payCurrency = "ETH", string displayCurrency = "EUR", string reference = "c1b933d5-3354-4f83-a05f-0b53f1be85f2")
        {
            // to ensure "merchantId" is required (not null)
            if (merchantId == null)
            {
                throw new InvalidDataException("merchantId is a required property for MerchantChannelRequestDto and cannot be null");
            }
            else
            {
                this.MerchantId = merchantId;
            }

            // to ensure "payCurrency" is required (not null)
            if (payCurrency == null)
            {
                throw new InvalidDataException("payCurrency is a required property for MerchantChannelRequestDto and cannot be null");
            }
            else
            {
                this.PayCurrency = payCurrency;
            }

            // to ensure "displayCurrency" is required (not null)
            if (displayCurrency == null)
            {
                throw new InvalidDataException("displayCurrency is a required property for MerchantChannelRequestDto and cannot be null");
            }
            else
            {
                this.DisplayCurrency = displayCurrency;
            }

            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new InvalidDataException("reference is a required property for MerchantChannelRequestDto and cannot be null");
            }
            else
            {
                this.Reference = reference;
            }

        }

        /// <summary>
        /// The merchant ID that you are creating the channel on.
        /// </summary>
        /// <value>The merchant ID that you are creating the channel on.</value>
        [DataMember(Name="merchantId", EmitDefaultValue=true)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The cryptocurrency code that the channel will operate on.
        /// </summary>
        /// <value>The cryptocurrency code that the channel will operate on.</value>
        [DataMember(Name="payCurrency", EmitDefaultValue=true)]
        public string PayCurrency { get; set; }

        /// <summary>
        /// The currency which pricing will be displayed to the end user in, can be the same as payCurrency, or can be different.
        /// </summary>
        /// <value>The currency which pricing will be displayed to the end user in, can be the same as payCurrency, or can be different.</value>
        [DataMember(Name="displayCurrency", EmitDefaultValue=true)]
        public string DisplayCurrency { get; set; }

        /// <summary>
        /// An external reference for the channel that your customer will see.
        /// </summary>
        /// <value>An external reference for the channel that your customer will see.</value>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantChannelRequestDto {\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  PayCurrency: ").Append(PayCurrency).Append("\n");
            sb.Append("  DisplayCurrency: ").Append(DisplayCurrency).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantChannelRequestDto);
        }

        /// <summary>
        /// Returns true if MerchantChannelRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantChannelRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantChannelRequestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.PayCurrency == input.PayCurrency ||
                    (this.PayCurrency != null &&
                    this.PayCurrency.Equals(input.PayCurrency))
                ) && 
                (
                    this.DisplayCurrency == input.DisplayCurrency ||
                    (this.DisplayCurrency != null &&
                    this.DisplayCurrency.Equals(input.DisplayCurrency))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.PayCurrency != null)
                    hashCode = hashCode * 59 + this.PayCurrency.GetHashCode();
                if (this.DisplayCurrency != null)
                    hashCode = hashCode * 59 + this.DisplayCurrency.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
