/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains the type of currency, amount to be paid, and amount received.
    /// </summary>
    [DataContract]
    public partial class PayAmountsDto :  IEquatable<PayAmountsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayAmountsDto" /> class.
        /// </summary>
        /// <param name="currency">The currency acronym..</param>
        /// <param name="amount">The amount to be paid..</param>
        /// <param name="actual">The actual amount received..</param>
        public PayAmountsDto(string currency = default(string), decimal amount = default(decimal), decimal actual = default(decimal))
        {
            this.Currency = currency;
            this.Amount = amount;
            this.Actual = actual;
        }

        /// <summary>
        /// The currency acronym.
        /// </summary>
        /// <value>The currency acronym.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// The amount to be paid.
        /// </summary>
        /// <value>The amount to be paid.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// The actual amount received.
        /// </summary>
        /// <value>The actual amount received.</value>
        [DataMember(Name="actual", EmitDefaultValue=false)]
        public decimal Actual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayAmountsDto {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Actual: ").Append(Actual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayAmountsDto);
        }

        /// <summary>
        /// Returns true if PayAmountsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PayAmountsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayAmountsDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Actual == input.Actual ||
                    (this.Actual != null &&
                    this.Actual.Equals(input.Actual))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Actual != null)
                    hashCode = hashCode * 59 + this.Actual.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
