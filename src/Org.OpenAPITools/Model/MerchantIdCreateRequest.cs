/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MerchantIdCreateRequest
    /// </summary>
    [DataContract]
    public partial class MerchantIdCreateRequest :  IEquatable<MerchantIdCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantIdCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantIdCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantIdCreateRequest" /> class.
        /// </summary>
        /// <param name="displayName">The name of the merchant that will be displayed on the payments page. (required) (default to &quot;Test Merchant Name&quot;).</param>
        /// <param name="webhookUrl">The URL that will recieve the webhooks. (default to &quot;https://www.URL.com/to/send/webhooks/to&quot;).</param>
        /// <param name="wallet">wallet (required).</param>
        public MerchantIdCreateRequest(string displayName = "Test Merchant Name", string webhookUrl = "https://www.URL.com/to/send/webhooks/to", MerchantIdCreateRequestWallet wallet = default(MerchantIdCreateRequestWallet))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for MerchantIdCreateRequest and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }

            // to ensure "wallet" is required (not null)
            if (wallet == null)
            {
                throw new InvalidDataException("wallet is a required property for MerchantIdCreateRequest and cannot be null");
            }
            else
            {
                this.Wallet = wallet;
            }

            // use default value if no "webhookUrl" provided
            if (webhookUrl == null)
            {
                this.WebhookUrl = "https://www.URL.com/to/send/webhooks/to";
            }
            else
            {
                this.WebhookUrl = webhookUrl;
            }
        }

        /// <summary>
        /// The name of the merchant that will be displayed on the payments page.
        /// </summary>
        /// <value>The name of the merchant that will be displayed on the payments page.</value>
        [DataMember(Name="displayName", EmitDefaultValue=true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The URL that will recieve the webhooks.
        /// </summary>
        /// <value>The URL that will recieve the webhooks.</value>
        [DataMember(Name="webhookUrl", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets Wallet
        /// </summary>
        [DataMember(Name="wallet", EmitDefaultValue=true)]
        public MerchantIdCreateRequestWallet Wallet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantIdCreateRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  Wallet: ").Append(Wallet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantIdCreateRequest);
        }

        /// <summary>
        /// Returns true if MerchantIdCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantIdCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantIdCreateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.Wallet == input.Wallet ||
                    (this.Wallet != null &&
                    this.Wallet.Equals(input.Wallet))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                if (this.Wallet != null)
                    hashCode = hashCode * 59 + this.Wallet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
