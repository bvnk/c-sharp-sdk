/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains all the information about a summary payment object returned.
    /// </summary>
    [DataContract]
    public partial class SummaryPaymentDto :  IEquatable<SummaryPaymentDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public DirectionDto? Type { get; set; }
        /// <summary>
        /// The payment sub type
        /// </summary>
        /// <value>The payment sub type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubTypeEnum
        {
            /// <summary>
            /// Enum MerchantPayIn for value: merchantPayIn
            /// </summary>
            [EnumMember(Value = "merchantPayIn")]
            MerchantPayIn = 1,

            /// <summary>
            /// Enum MerchantPayOut for value: merchantPayOut
            /// </summary>
            [EnumMember(Value = "merchantPayOut")]
            MerchantPayOut = 2,

            /// <summary>
            /// Enum MerchantRefund for value: merchantRefund
            /// </summary>
            [EnumMember(Value = "merchantRefund")]
            MerchantRefund = 3

        }

        /// <summary>
        /// The payment sub type
        /// </summary>
        /// <value>The payment sub type</value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public SubTypeEnum? SubType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public PaymentStatusDto? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryPaymentDto" /> class.
        /// </summary>
        /// <param name="uuid">The unique identifier for the merchant payment..</param>
        /// <param name="merchantDisplayName">The display name for the merchant payment..</param>
        /// <param name="merchantId">The Merchant ID. You can find it on the Merchant Details page in your account..</param>
        /// <param name="dateCreated">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="expiryDate">The date and time, encoded into UNIX epoch timestamps.</param>
        /// <param name="quoteExpiryDate">The date and time, encoded into UNIX epoch timestamps.</param>
        /// <param name="acceptanceExpiryDate">The date and time, encoded into UNIX epoch timestamps.</param>
        /// <param name="quoteStatus">quoteStatus.</param>
        /// <param name="reference">The custom payment reference ID to tie the payment to your customer..</param>
        /// <param name="type">type.</param>
        /// <param name="subType">The payment sub type (default to SubTypeEnum.MerchantPayIn).</param>
        /// <param name="status">status.</param>
        /// <param name="displayCurrency">displayCurrency.</param>
        /// <param name="walletCurrency">walletCurrency.</param>
        /// <param name="paidCurrency">paidCurrency.</param>
        /// <param name="feeCurrency">feeCurrency.</param>
        /// <param name="displayRate">displayRate.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        /// <param name="address">address.</param>
        /// <param name="returnUrl">The URL that the customer will be redirected to if they click &#39;Back to Merchant&#39; button on the payment web page..</param>
        /// <param name="redirectUrl">The URL to the payment page that you redirect your customers to..</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="refund">The payment this object is a refund of. This should reference the pay in that this refund was created for..</param>
        /// <param name="refunds">Refunds that have been requested for this payment. This should reference the refund payout for this pay in..</param>
        public SummaryPaymentDto(string uuid = default(string), string merchantDisplayName = default(string), string merchantId = default(string), long dateCreated = default(long), long expiryDate = default(long), long quoteExpiryDate = default(long), long acceptanceExpiryDate = default(long), string quoteStatus = default(string), string reference = default(string), DirectionDto? type = default(DirectionDto?), SubTypeEnum? subType = SubTypeEnum.MerchantPayIn, PaymentStatusDto? status = default(PaymentStatusDto?), PayAmountsDto displayCurrency = default(PayAmountsDto), PayAmountsDto walletCurrency = default(PayAmountsDto), PayAmountsDto paidCurrency = default(PayAmountsDto), PayAmountsDto feeCurrency = default(PayAmountsDto), ExchangeRateDto displayRate = default(ExchangeRateDto), ExchangeRateDto exchangeRate = default(ExchangeRateDto), CryptoAddressDto address = default(CryptoAddressDto), string returnUrl = default(string), string redirectUrl = default(string), List<GatewayTransactionDto> transactions = default(List<GatewayTransactionDto>), Object refund = default(Object), List<Object> refunds = default(List<Object>))
        {
            this.Uuid = uuid;
            this.MerchantDisplayName = merchantDisplayName;
            this.MerchantId = merchantId;
            this.DateCreated = dateCreated;
            this.ExpiryDate = expiryDate;
            this.QuoteExpiryDate = quoteExpiryDate;
            this.AcceptanceExpiryDate = acceptanceExpiryDate;
            this.QuoteStatus = quoteStatus;
            this.Reference = reference;
            this.Type = type;
            // use default value if no "subType" provided
            if (subType == null)
            {
                this.SubType = SubTypeEnum.MerchantPayIn;
            }
            else
            {
                this.SubType = subType;
            }
            this.Status = status;
            this.DisplayCurrency = displayCurrency;
            this.WalletCurrency = walletCurrency;
            this.PaidCurrency = paidCurrency;
            this.FeeCurrency = feeCurrency;
            this.DisplayRate = displayRate;
            this.ExchangeRate = exchangeRate;
            this.Address = address;
            this.ReturnUrl = returnUrl;
            this.RedirectUrl = redirectUrl;
            this.Transactions = transactions;
            this.Refund = refund;
            this.Refunds = refunds;
        }

        /// <summary>
        /// The unique identifier for the merchant payment.
        /// </summary>
        /// <value>The unique identifier for the merchant payment.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The display name for the merchant payment.
        /// </summary>
        /// <value>The display name for the merchant payment.</value>
        [DataMember(Name="merchantDisplayName", EmitDefaultValue=false)]
        public string MerchantDisplayName { get; set; }

        /// <summary>
        /// The Merchant ID. You can find it on the Merchant Details page in your account.
        /// </summary>
        /// <value>The Merchant ID. You can find it on the Merchant Details page in your account.</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public long DateCreated { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps</value>
        [DataMember(Name="expiryDate", EmitDefaultValue=false)]
        public long ExpiryDate { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps</value>
        [DataMember(Name="quoteExpiryDate", EmitDefaultValue=false)]
        public long QuoteExpiryDate { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps</value>
        [DataMember(Name="acceptanceExpiryDate", EmitDefaultValue=false)]
        public long AcceptanceExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets QuoteStatus
        /// </summary>
        [DataMember(Name="quoteStatus", EmitDefaultValue=false)]
        public string QuoteStatus { get; set; }

        /// <summary>
        /// The custom payment reference ID to tie the payment to your customer.
        /// </summary>
        /// <value>The custom payment reference ID to tie the payment to your customer.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }




        /// <summary>
        /// Gets or Sets DisplayCurrency
        /// </summary>
        [DataMember(Name="displayCurrency", EmitDefaultValue=false)]
        public PayAmountsDto DisplayCurrency { get; set; }

        /// <summary>
        /// Gets or Sets WalletCurrency
        /// </summary>
        [DataMember(Name="walletCurrency", EmitDefaultValue=false)]
        public PayAmountsDto WalletCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PaidCurrency
        /// </summary>
        [DataMember(Name="paidCurrency", EmitDefaultValue=false)]
        public PayAmountsDto PaidCurrency { get; set; }

        /// <summary>
        /// Gets or Sets FeeCurrency
        /// </summary>
        [DataMember(Name="feeCurrency", EmitDefaultValue=false)]
        public PayAmountsDto FeeCurrency { get; set; }

        /// <summary>
        /// Gets or Sets DisplayRate
        /// </summary>
        [DataMember(Name="displayRate", EmitDefaultValue=false)]
        public ExchangeRateDto DisplayRate { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public ExchangeRateDto ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public CryptoAddressDto Address { get; set; }

        /// <summary>
        /// The URL that the customer will be redirected to if they click &#39;Back to Merchant&#39; button on the payment web page.
        /// </summary>
        /// <value>The URL that the customer will be redirected to if they click &#39;Back to Merchant&#39; button on the payment web page.</value>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// The URL to the payment page that you redirect your customers to.
        /// </summary>
        /// <value>The URL to the payment page that you redirect your customers to.</value>
        [DataMember(Name="redirectUrl", EmitDefaultValue=false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<GatewayTransactionDto> Transactions { get; set; }

        /// <summary>
        /// The payment this object is a refund of. This should reference the pay in that this refund was created for.
        /// </summary>
        /// <value>The payment this object is a refund of. This should reference the pay in that this refund was created for.</value>
        [DataMember(Name="refund", EmitDefaultValue=false)]
        public Object Refund { get; set; }

        /// <summary>
        /// Refunds that have been requested for this payment. This should reference the refund payout for this pay in.
        /// </summary>
        /// <value>Refunds that have been requested for this payment. This should reference the refund payout for this pay in.</value>
        [DataMember(Name="refunds", EmitDefaultValue=false)]
        public List<Object> Refunds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SummaryPaymentDto {\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  MerchantDisplayName: ").Append(MerchantDisplayName).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  QuoteExpiryDate: ").Append(QuoteExpiryDate).Append("\n");
            sb.Append("  AcceptanceExpiryDate: ").Append(AcceptanceExpiryDate).Append("\n");
            sb.Append("  QuoteStatus: ").Append(QuoteStatus).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  DisplayCurrency: ").Append(DisplayCurrency).Append("\n");
            sb.Append("  WalletCurrency: ").Append(WalletCurrency).Append("\n");
            sb.Append("  PaidCurrency: ").Append(PaidCurrency).Append("\n");
            sb.Append("  FeeCurrency: ").Append(FeeCurrency).Append("\n");
            sb.Append("  DisplayRate: ").Append(DisplayRate).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Refund: ").Append(Refund).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummaryPaymentDto);
        }

        /// <summary>
        /// Returns true if SummaryPaymentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SummaryPaymentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummaryPaymentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.MerchantDisplayName == input.MerchantDisplayName ||
                    (this.MerchantDisplayName != null &&
                    this.MerchantDisplayName.Equals(input.MerchantDisplayName))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.QuoteExpiryDate == input.QuoteExpiryDate ||
                    (this.QuoteExpiryDate != null &&
                    this.QuoteExpiryDate.Equals(input.QuoteExpiryDate))
                ) && 
                (
                    this.AcceptanceExpiryDate == input.AcceptanceExpiryDate ||
                    (this.AcceptanceExpiryDate != null &&
                    this.AcceptanceExpiryDate.Equals(input.AcceptanceExpiryDate))
                ) && 
                (
                    this.QuoteStatus == input.QuoteStatus ||
                    (this.QuoteStatus != null &&
                    this.QuoteStatus.Equals(input.QuoteStatus))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.DisplayCurrency == input.DisplayCurrency ||
                    (this.DisplayCurrency != null &&
                    this.DisplayCurrency.Equals(input.DisplayCurrency))
                ) && 
                (
                    this.WalletCurrency == input.WalletCurrency ||
                    (this.WalletCurrency != null &&
                    this.WalletCurrency.Equals(input.WalletCurrency))
                ) && 
                (
                    this.PaidCurrency == input.PaidCurrency ||
                    (this.PaidCurrency != null &&
                    this.PaidCurrency.Equals(input.PaidCurrency))
                ) && 
                (
                    this.FeeCurrency == input.FeeCurrency ||
                    (this.FeeCurrency != null &&
                    this.FeeCurrency.Equals(input.FeeCurrency))
                ) && 
                (
                    this.DisplayRate == input.DisplayRate ||
                    (this.DisplayRate != null &&
                    this.DisplayRate.Equals(input.DisplayRate))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Refund == input.Refund ||
                    (this.Refund != null &&
                    this.Refund.Equals(input.Refund))
                ) && 
                (
                    this.Refunds == input.Refunds ||
                    this.Refunds != null &&
                    input.Refunds != null &&
                    this.Refunds.SequenceEqual(input.Refunds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.MerchantDisplayName != null)
                    hashCode = hashCode * 59 + this.MerchantDisplayName.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.QuoteExpiryDate != null)
                    hashCode = hashCode * 59 + this.QuoteExpiryDate.GetHashCode();
                if (this.AcceptanceExpiryDate != null)
                    hashCode = hashCode * 59 + this.AcceptanceExpiryDate.GetHashCode();
                if (this.QuoteStatus != null)
                    hashCode = hashCode * 59 + this.QuoteStatus.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.DisplayCurrency != null)
                    hashCode = hashCode * 59 + this.DisplayCurrency.GetHashCode();
                if (this.WalletCurrency != null)
                    hashCode = hashCode * 59 + this.WalletCurrency.GetHashCode();
                if (this.PaidCurrency != null)
                    hashCode = hashCode * 59 + this.PaidCurrency.GetHashCode();
                if (this.FeeCurrency != null)
                    hashCode = hashCode * 59 + this.FeeCurrency.GetHashCode();
                if (this.DisplayRate != null)
                    hashCode = hashCode * 59 + this.DisplayRate.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.RedirectUrl != null)
                    hashCode = hashCode * 59 + this.RedirectUrl.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.Refund != null)
                    hashCode = hashCode * 59 + this.Refund.GetHashCode();
                if (this.Refunds != null)
                    hashCode = hashCode * 59 + this.Refunds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
