/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// WalletDto
    /// </summary>
    [DataContract]
    public partial class WalletDto :  IEquatable<WalletDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletDto" /> class.
        /// </summary>
        /// <param name="address">The crypto wallet address.</param>
        /// <param name="alternatives">The array of alternative protocol addresses..</param>
        /// <param name="approxAvailable">The approximate amount availible in the wallet..</param>
        /// <param name="approxBalance">The balance amount availible of the wallet..</param>
        /// <param name="available">available.</param>
        /// <param name="balance">The balance of the wallet..</param>
        /// <param name="convertedAvailable">The availible converted amount.</param>
        /// <param name="currency">currency.</param>
        /// <param name="custodianWallet">Is a custodian wallet..</param>
        /// <param name="depositFee">The fee to deposit funds in wallet..</param>
        /// <param name="description">The description of the wallet..</param>
        /// <param name="id">The wallet ID..</param>
        /// <param name="isEmoney">Is E Money Wallet (default to false).</param>
        /// <param name="lookup">Is a lookup..</param>
        /// <param name="protocol">The protocol of the wallet..</param>
        /// <param name="supportsDeposits">Is able to support deposits. (default to true).</param>
        /// <param name="supportsThirdParty">Is a third party wallet. (default to false).</param>
        /// <param name="supportsWithdrawals">Is able to support withdrawals. (default to true).</param>
        /// <param name="withdrawalFee">The fee to withdraw funds from wallet..</param>
        public WalletDto(string address = default(string), List<Object> alternatives = default(List<Object>), string approxAvailable = default(string), string approxBalance = default(string), float available = default(float), float balance = default(float), float convertedAvailable = default(float), CurrencyDto currency = default(CurrencyDto), bool custodianWallet = default(bool), float depositFee = default(float), string description = default(string), long id = default(long), bool isEmoney = false, string lookup = default(string), string protocol = default(string), bool supportsDeposits = true, bool supportsThirdParty = false, bool supportsWithdrawals = true, float withdrawalFee = default(float))
        {
            this.Address = address;
            this.Alternatives = alternatives;
            this.ApproxAvailable = approxAvailable;
            this.ApproxBalance = approxBalance;
            this.Available = available;
            this.Balance = balance;
            this.ConvertedAvailable = convertedAvailable;
            this.Currency = currency;
            this.CustodianWallet = custodianWallet;
            this.DepositFee = depositFee;
            this.Description = description;
            this.Id = id;
            // use default value if no "isEmoney" provided
            if (isEmoney == null)
            {
                this.IsEmoney = false;
            }
            else
            {
                this.IsEmoney = isEmoney;
            }
            this.Lookup = lookup;
            this.Protocol = protocol;
            // use default value if no "supportsDeposits" provided
            if (supportsDeposits == null)
            {
                this.SupportsDeposits = true;
            }
            else
            {
                this.SupportsDeposits = supportsDeposits;
            }
            // use default value if no "supportsThirdParty" provided
            if (supportsThirdParty == null)
            {
                this.SupportsThirdParty = false;
            }
            else
            {
                this.SupportsThirdParty = supportsThirdParty;
            }
            // use default value if no "supportsWithdrawals" provided
            if (supportsWithdrawals == null)
            {
                this.SupportsWithdrawals = true;
            }
            else
            {
                this.SupportsWithdrawals = supportsWithdrawals;
            }
            this.WithdrawalFee = withdrawalFee;
        }

        /// <summary>
        /// The crypto wallet address
        /// </summary>
        /// <value>The crypto wallet address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The array of alternative protocol addresses.
        /// </summary>
        /// <value>The array of alternative protocol addresses.</value>
        [DataMember(Name="alternatives", EmitDefaultValue=false)]
        public List<Object> Alternatives { get; set; }

        /// <summary>
        /// The approximate amount availible in the wallet.
        /// </summary>
        /// <value>The approximate amount availible in the wallet.</value>
        [DataMember(Name="approxAvailable", EmitDefaultValue=false)]
        public string ApproxAvailable { get; set; }

        /// <summary>
        /// The balance amount availible of the wallet.
        /// </summary>
        /// <value>The balance amount availible of the wallet.</value>
        [DataMember(Name="approxBalance", EmitDefaultValue=false)]
        public string ApproxBalance { get; set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name="available", EmitDefaultValue=false)]
        public float Available { get; set; }

        /// <summary>
        /// The balance of the wallet.
        /// </summary>
        /// <value>The balance of the wallet.</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public float Balance { get; set; }

        /// <summary>
        /// The availible converted amount
        /// </summary>
        /// <value>The availible converted amount</value>
        [DataMember(Name="convertedAvailable", EmitDefaultValue=false)]
        public float ConvertedAvailable { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyDto Currency { get; set; }

        /// <summary>
        /// Is a custodian wallet.
        /// </summary>
        /// <value>Is a custodian wallet.</value>
        [DataMember(Name="custodianWallet", EmitDefaultValue=false)]
        public bool CustodianWallet { get; set; }

        /// <summary>
        /// The fee to deposit funds in wallet.
        /// </summary>
        /// <value>The fee to deposit funds in wallet.</value>
        [DataMember(Name="depositFee", EmitDefaultValue=false)]
        public float DepositFee { get; set; }

        /// <summary>
        /// The description of the wallet.
        /// </summary>
        /// <value>The description of the wallet.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The wallet ID.
        /// </summary>
        /// <value>The wallet ID.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Is E Money Wallet
        /// </summary>
        /// <value>Is E Money Wallet</value>
        [DataMember(Name="isEmoney", EmitDefaultValue=false)]
        public bool IsEmoney { get; set; }

        /// <summary>
        /// Is a lookup.
        /// </summary>
        /// <value>Is a lookup.</value>
        [DataMember(Name="lookup", EmitDefaultValue=false)]
        public string Lookup { get; set; }

        /// <summary>
        /// The protocol of the wallet.
        /// </summary>
        /// <value>The protocol of the wallet.</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Is able to support deposits.
        /// </summary>
        /// <value>Is able to support deposits.</value>
        [DataMember(Name="supportsDeposits", EmitDefaultValue=false)]
        public bool SupportsDeposits { get; set; }

        /// <summary>
        /// Is a third party wallet.
        /// </summary>
        /// <value>Is a third party wallet.</value>
        [DataMember(Name="supportsThirdParty", EmitDefaultValue=false)]
        public bool SupportsThirdParty { get; set; }

        /// <summary>
        /// Is able to support withdrawals.
        /// </summary>
        /// <value>Is able to support withdrawals.</value>
        [DataMember(Name="supportsWithdrawals", EmitDefaultValue=false)]
        public bool SupportsWithdrawals { get; set; }

        /// <summary>
        /// The fee to withdraw funds from wallet.
        /// </summary>
        /// <value>The fee to withdraw funds from wallet.</value>
        [DataMember(Name="withdrawalFee", EmitDefaultValue=false)]
        public float WithdrawalFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletDto {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Alternatives: ").Append(Alternatives).Append("\n");
            sb.Append("  ApproxAvailable: ").Append(ApproxAvailable).Append("\n");
            sb.Append("  ApproxBalance: ").Append(ApproxBalance).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  ConvertedAvailable: ").Append(ConvertedAvailable).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CustodianWallet: ").Append(CustodianWallet).Append("\n");
            sb.Append("  DepositFee: ").Append(DepositFee).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsEmoney: ").Append(IsEmoney).Append("\n");
            sb.Append("  Lookup: ").Append(Lookup).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  SupportsDeposits: ").Append(SupportsDeposits).Append("\n");
            sb.Append("  SupportsThirdParty: ").Append(SupportsThirdParty).Append("\n");
            sb.Append("  SupportsWithdrawals: ").Append(SupportsWithdrawals).Append("\n");
            sb.Append("  WithdrawalFee: ").Append(WithdrawalFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletDto);
        }

        /// <summary>
        /// Returns true if WalletDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Alternatives == input.Alternatives ||
                    this.Alternatives != null &&
                    input.Alternatives != null &&
                    this.Alternatives.SequenceEqual(input.Alternatives)
                ) && 
                (
                    this.ApproxAvailable == input.ApproxAvailable ||
                    (this.ApproxAvailable != null &&
                    this.ApproxAvailable.Equals(input.ApproxAvailable))
                ) && 
                (
                    this.ApproxBalance == input.ApproxBalance ||
                    (this.ApproxBalance != null &&
                    this.ApproxBalance.Equals(input.ApproxBalance))
                ) && 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.ConvertedAvailable == input.ConvertedAvailable ||
                    (this.ConvertedAvailable != null &&
                    this.ConvertedAvailable.Equals(input.ConvertedAvailable))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.CustodianWallet == input.CustodianWallet ||
                    (this.CustodianWallet != null &&
                    this.CustodianWallet.Equals(input.CustodianWallet))
                ) && 
                (
                    this.DepositFee == input.DepositFee ||
                    (this.DepositFee != null &&
                    this.DepositFee.Equals(input.DepositFee))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsEmoney == input.IsEmoney ||
                    (this.IsEmoney != null &&
                    this.IsEmoney.Equals(input.IsEmoney))
                ) && 
                (
                    this.Lookup == input.Lookup ||
                    (this.Lookup != null &&
                    this.Lookup.Equals(input.Lookup))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.SupportsDeposits == input.SupportsDeposits ||
                    (this.SupportsDeposits != null &&
                    this.SupportsDeposits.Equals(input.SupportsDeposits))
                ) && 
                (
                    this.SupportsThirdParty == input.SupportsThirdParty ||
                    (this.SupportsThirdParty != null &&
                    this.SupportsThirdParty.Equals(input.SupportsThirdParty))
                ) && 
                (
                    this.SupportsWithdrawals == input.SupportsWithdrawals ||
                    (this.SupportsWithdrawals != null &&
                    this.SupportsWithdrawals.Equals(input.SupportsWithdrawals))
                ) && 
                (
                    this.WithdrawalFee == input.WithdrawalFee ||
                    (this.WithdrawalFee != null &&
                    this.WithdrawalFee.Equals(input.WithdrawalFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Alternatives != null)
                    hashCode = hashCode * 59 + this.Alternatives.GetHashCode();
                if (this.ApproxAvailable != null)
                    hashCode = hashCode * 59 + this.ApproxAvailable.GetHashCode();
                if (this.ApproxBalance != null)
                    hashCode = hashCode * 59 + this.ApproxBalance.GetHashCode();
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.ConvertedAvailable != null)
                    hashCode = hashCode * 59 + this.ConvertedAvailable.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.CustodianWallet != null)
                    hashCode = hashCode * 59 + this.CustodianWallet.GetHashCode();
                if (this.DepositFee != null)
                    hashCode = hashCode * 59 + this.DepositFee.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsEmoney != null)
                    hashCode = hashCode * 59 + this.IsEmoney.GetHashCode();
                if (this.Lookup != null)
                    hashCode = hashCode * 59 + this.Lookup.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.SupportsDeposits != null)
                    hashCode = hashCode * 59 + this.SupportsDeposits.GetHashCode();
                if (this.SupportsThirdParty != null)
                    hashCode = hashCode * 59 + this.SupportsThirdParty.GetHashCode();
                if (this.SupportsWithdrawals != null)
                    hashCode = hashCode * 59 + this.SupportsWithdrawals.GetHashCode();
                if (this.WithdrawalFee != null)
                    hashCode = hashCode * 59 + this.WithdrawalFee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
