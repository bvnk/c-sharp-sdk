/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QuoteDto
    /// </summary>
    [DataContract]
    public partial class QuoteDto :  IEquatable<QuoteDto>, IValidatableObject
    {
        /// <summary>
        /// The status of the quote.
        /// </summary>
        /// <value>The status of the quote.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuoteStatusEnum
        {
            /// <summary>
            /// Enum ESTIMATE for value: ESTIMATE
            /// </summary>
            [EnumMember(Value = "ESTIMATE")]
            ESTIMATE = 1,

            /// <summary>
            /// Enum TEMPLATE for value: TEMPLATE
            /// </summary>
            [EnumMember(Value = "TEMPLATE")]
            TEMPLATE = 2,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 3,

            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 4,

            /// <summary>
            /// Enum PAYMENTINRECEIVED for value: PAYMENT_IN_RECEIVED
            /// </summary>
            [EnumMember(Value = "PAYMENT_IN_RECEIVED")]
            PAYMENTINRECEIVED = 5,

            /// <summary>
            /// Enum PAYMENTINSEEN for value: PAYMENT_IN_SEEN
            /// </summary>
            [EnumMember(Value = "PAYMENT_IN_SEEN")]
            PAYMENTINSEEN = 6,

            /// <summary>
            /// Enum PAYMENTINFAILED for value: PAYMENT_IN_FAILED
            /// </summary>
            [EnumMember(Value = "PAYMENT_IN_FAILED")]
            PAYMENTINFAILED = 7,

            /// <summary>
            /// Enum FRAUDCHECKPENDING for value: FRAUD_CHECK_PENDING
            /// </summary>
            [EnumMember(Value = "FRAUD_CHECK_PENDING")]
            FRAUDCHECKPENDING = 8,

            /// <summary>
            /// Enum FRAUDCHECKFAILED for value: FRAUD_CHECK_FAILED
            /// </summary>
            [EnumMember(Value = "FRAUD_CHECK_FAILED")]
            FRAUDCHECKFAILED = 9,

            /// <summary>
            /// Enum PAYMENTOUTPENDING for value: PAYMENT_OUT_PENDING
            /// </summary>
            [EnumMember(Value = "PAYMENT_OUT_PENDING")]
            PAYMENTOUTPENDING = 10,

            /// <summary>
            /// Enum PAYMENTOUTPROCESSED for value: PAYMENT_OUT_PROCESSED
            /// </summary>
            [EnumMember(Value = "PAYMENT_OUT_PROCESSED")]
            PAYMENTOUTPROCESSED = 11,

            /// <summary>
            /// Enum PAYMENTOUTUSED for value: PAYMENT_OUT_USED
            /// </summary>
            [EnumMember(Value = "PAYMENT_OUT_USED")]
            PAYMENTOUTUSED = 12,

            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 13,

            /// <summary>
            /// Enum CONVERSIONFAILED for value: CONVERSION_FAILED
            /// </summary>
            [EnumMember(Value = "CONVERSION_FAILED")]
            CONVERSIONFAILED = 14,

            /// <summary>
            /// Enum PAYMENTOUTFAILED for value: PAYMENT_OUT_FAILED
            /// </summary>
            [EnumMember(Value = "PAYMENT_OUT_FAILED")]
            PAYMENTOUTFAILED = 15,

            /// <summary>
            /// Enum LOCKED for value: LOCKED
            /// </summary>
            [EnumMember(Value = "LOCKED")]
            LOCKED = 16,

            /// <summary>
            /// Enum REFUNDED for value: REFUNDED
            /// </summary>
            [EnumMember(Value = "REFUNDED")]
            REFUNDED = 17

        }

        /// <summary>
        /// The status of the quote.
        /// </summary>
        /// <value>The status of the quote.</value>
        [DataMember(Name="quoteStatus", EmitDefaultValue=false)]
        public QuoteStatusEnum? QuoteStatus { get; set; }
        /// <summary>
        /// The payment status.
        /// </summary>
        /// <value>The payment status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentStatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,

            /// <summary>
            /// Enum SEEN for value: SEEN
            /// </summary>
            [EnumMember(Value = "SEEN")]
            SEEN = 2,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 3,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 4,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 5,

            /// <summary>
            /// Enum FRAUDPENDING for value: FRAUD_PENDING
            /// </summary>
            [EnumMember(Value = "FRAUD_PENDING")]
            FRAUDPENDING = 6,

            /// <summary>
            /// Enum FRAUDPENDINGMANUALREVIEW for value: FRAUD_PENDING_MANUAL_REVIEW
            /// </summary>
            [EnumMember(Value = "FRAUD_PENDING_MANUAL_REVIEW")]
            FRAUDPENDINGMANUALREVIEW = 7,

            /// <summary>
            /// Enum FRAUDFAILED for value: FRAUD_FAILED
            /// </summary>
            [EnumMember(Value = "FRAUD_FAILED")]
            FRAUDFAILED = 8,

            /// <summary>
            /// Enum REFUNDPENDING for value: REFUND_PENDING
            /// </summary>
            [EnumMember(Value = "REFUND_PENDING")]
            REFUNDPENDING = 9,

            /// <summary>
            /// Enum REFUNDED for value: REFUNDED
            /// </summary>
            [EnumMember(Value = "REFUNDED")]
            REFUNDED = 10,

            /// <summary>
            /// Enum MANUALSUCCESS for value: MANUAL_SUCCESS
            /// </summary>
            [EnumMember(Value = "MANUAL_SUCCESS")]
            MANUALSUCCESS = 11,

            /// <summary>
            /// Enum REFUNDFAILED for value: REFUND_FAILED
            /// </summary>
            [EnumMember(Value = "REFUND_FAILED")]
            REFUNDFAILED = 12

        }

        /// <summary>
        /// The payment status.
        /// </summary>
        /// <value>The payment status.</value>
        [DataMember(Name="paymentStatus", EmitDefaultValue=false)]
        public PaymentStatusEnum? PaymentStatus { get; set; }
        /// <summary>
        /// The type of quote.
        /// </summary>
        /// <value>The type of quote.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FIXED for value: FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED = 1,

            /// <summary>
            /// Enum MARKET for value: MARKET
            /// </summary>
            [EnumMember(Value = "MARKET")]
            MARKET = 2

        }

        /// <summary>
        /// The type of quote.
        /// </summary>
        /// <value>The type of quote.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuoteDto" /> class.
        /// </summary>
        /// <param name="id">The ID of the quote..</param>
        /// <param name="from">The currency to convert from..</param>
        /// <param name="to">The currency to convert to..</param>
        /// <param name="amountIn">The amount converted to..</param>
        /// <param name="amountDue">The amount due to be converted..</param>
        /// <param name="amountOut">The amount being converted out..</param>
        /// <param name="price">The price quoted..</param>
        /// <param name="quoteStatus">The status of the quote..</param>
        /// <param name="paymentStatus">The payment status..</param>
        /// <param name="acceptanceExpiryDate">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="acceptanceDate">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="paymentExpiryDate">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="paymentReceiptDate">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="payInLegs">payInLegs.</param>
        /// <param name="payInMethod">payInMethod.</param>
        /// <param name="payOutMethod">payOutMethod.</param>
        /// <param name="uuid">The UUID of the quote..</param>
        /// <param name="payOutInstruction">payOutInstruction.</param>
        /// <param name="payInInstruction">payInInstruction.</param>
        /// <param name="usePayInMethod">usePayInMethod.</param>
        /// <param name="usePayOutMethod">usePayOutMethod.</param>
        /// <param name="fee">The fee for the quote..</param>
        /// <param name="processingFee">The processing fee..</param>
        /// <param name="type">The type of quote..</param>
        /// <param name="netPrice">The net price fo the quote..</param>
        /// <param name="grossPrice">The gross price of the quote..</param>
        /// <param name="amountInGross">The price of the quote in gross..</param>
        /// <param name="amountInNet">The price of the quote in net..</param>
        /// <param name="fees">fees.</param>
        /// <param name="dateCreated">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="lastUpdated">The date and time, encoded into UNIX epoch timestamps..</param>
        public QuoteDto(long id = default(long), string from = default(string), string to = default(string), decimal amountIn = default(decimal), decimal amountDue = default(decimal), decimal amountOut = default(decimal), decimal price = default(decimal), QuoteStatusEnum? quoteStatus = default(QuoteStatusEnum?), PaymentStatusEnum? paymentStatus = default(PaymentStatusEnum?), long acceptanceExpiryDate = default(long), long acceptanceDate = default(long), long paymentExpiryDate = default(long), long paymentReceiptDate = default(long), List<PaymentLegDto> payInLegs = default(List<PaymentLegDto>), PayInMethodDto payInMethod = default(PayInMethodDto), PayOutMethodDto payOutMethod = default(PayOutMethodDto), string uuid = default(string), PayOutInstructionDto payOutInstruction = default(PayOutInstructionDto), PayInInstructionDto payInInstruction = default(PayInInstructionDto), AccountMethodDto usePayInMethod = default(AccountMethodDto), AccountMethodDto usePayOutMethod = default(AccountMethodDto), decimal fee = default(decimal), decimal processingFee = default(decimal), TypeEnum? type = default(TypeEnum?), decimal netPrice = default(decimal), decimal grossPrice = default(decimal), decimal amountInGross = default(decimal), decimal amountInNet = default(decimal), FeesDto fees = default(FeesDto), long dateCreated = default(long), long lastUpdated = default(long))
        {
            this.Id = id;
            this.From = from;
            this.To = to;
            this.AmountIn = amountIn;
            this.AmountDue = amountDue;
            this.AmountOut = amountOut;
            this.Price = price;
            this.QuoteStatus = quoteStatus;
            this.PaymentStatus = paymentStatus;
            this.AcceptanceExpiryDate = acceptanceExpiryDate;
            this.AcceptanceDate = acceptanceDate;
            this.PaymentExpiryDate = paymentExpiryDate;
            this.PaymentReceiptDate = paymentReceiptDate;
            this.PayInLegs = payInLegs;
            this.PayInMethod = payInMethod;
            this.PayOutMethod = payOutMethod;
            this.Uuid = uuid;
            this.PayOutInstruction = payOutInstruction;
            this.PayInInstruction = payInInstruction;
            this.UsePayInMethod = usePayInMethod;
            this.UsePayOutMethod = usePayOutMethod;
            this.Fee = fee;
            this.ProcessingFee = processingFee;
            this.Type = type;
            this.NetPrice = netPrice;
            this.GrossPrice = grossPrice;
            this.AmountInGross = amountInGross;
            this.AmountInNet = amountInNet;
            this.Fees = fees;
            this.DateCreated = dateCreated;
            this.LastUpdated = lastUpdated;
        }

        /// <summary>
        /// The ID of the quote.
        /// </summary>
        /// <value>The ID of the quote.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// The currency to convert from.
        /// </summary>
        /// <value>The currency to convert from.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// The currency to convert to.
        /// </summary>
        /// <value>The currency to convert to.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The amount converted to.
        /// </summary>
        /// <value>The amount converted to.</value>
        [DataMember(Name="amountIn", EmitDefaultValue=false)]
        public decimal AmountIn { get; set; }

        /// <summary>
        /// The amount due to be converted.
        /// </summary>
        /// <value>The amount due to be converted.</value>
        [DataMember(Name="amountDue", EmitDefaultValue=false)]
        public decimal AmountDue { get; set; }

        /// <summary>
        /// The amount being converted out.
        /// </summary>
        /// <value>The amount being converted out.</value>
        [DataMember(Name="amountOut", EmitDefaultValue=false)]
        public decimal AmountOut { get; set; }

        /// <summary>
        /// The price quoted.
        /// </summary>
        /// <value>The price quoted.</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal Price { get; set; }



        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="acceptanceExpiryDate", EmitDefaultValue=false)]
        public long AcceptanceExpiryDate { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="acceptanceDate", EmitDefaultValue=false)]
        public long AcceptanceDate { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="paymentExpiryDate", EmitDefaultValue=false)]
        public long PaymentExpiryDate { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="paymentReceiptDate", EmitDefaultValue=false)]
        public long PaymentReceiptDate { get; set; }

        /// <summary>
        /// Gets or Sets PayInLegs
        /// </summary>
        [DataMember(Name="payInLegs", EmitDefaultValue=false)]
        public List<PaymentLegDto> PayInLegs { get; set; }

        /// <summary>
        /// Gets or Sets PayInMethod
        /// </summary>
        [DataMember(Name="payInMethod", EmitDefaultValue=false)]
        public PayInMethodDto PayInMethod { get; set; }

        /// <summary>
        /// Gets or Sets PayOutMethod
        /// </summary>
        [DataMember(Name="payOutMethod", EmitDefaultValue=false)]
        public PayOutMethodDto PayOutMethod { get; set; }

        /// <summary>
        /// The UUID of the quote.
        /// </summary>
        /// <value>The UUID of the quote.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets PayOutInstruction
        /// </summary>
        [DataMember(Name="payOutInstruction", EmitDefaultValue=false)]
        public PayOutInstructionDto PayOutInstruction { get; set; }

        /// <summary>
        /// Gets or Sets PayInInstruction
        /// </summary>
        [DataMember(Name="payInInstruction", EmitDefaultValue=false)]
        public PayInInstructionDto PayInInstruction { get; set; }

        /// <summary>
        /// Gets or Sets UsePayInMethod
        /// </summary>
        [DataMember(Name="usePayInMethod", EmitDefaultValue=false)]
        public AccountMethodDto UsePayInMethod { get; set; }

        /// <summary>
        /// Gets or Sets UsePayOutMethod
        /// </summary>
        [DataMember(Name="usePayOutMethod", EmitDefaultValue=false)]
        public AccountMethodDto UsePayOutMethod { get; set; }

        /// <summary>
        /// The fee for the quote.
        /// </summary>
        /// <value>The fee for the quote.</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public decimal Fee { get; set; }

        /// <summary>
        /// The processing fee.
        /// </summary>
        /// <value>The processing fee.</value>
        [DataMember(Name="processingFee", EmitDefaultValue=false)]
        public decimal ProcessingFee { get; set; }


        /// <summary>
        /// The net price fo the quote.
        /// </summary>
        /// <value>The net price fo the quote.</value>
        [DataMember(Name="netPrice", EmitDefaultValue=false)]
        public decimal NetPrice { get; set; }

        /// <summary>
        /// The gross price of the quote.
        /// </summary>
        /// <value>The gross price of the quote.</value>
        [DataMember(Name="grossPrice", EmitDefaultValue=false)]
        public decimal GrossPrice { get; set; }

        /// <summary>
        /// The price of the quote in gross.
        /// </summary>
        /// <value>The price of the quote in gross.</value>
        [DataMember(Name="amountInGross", EmitDefaultValue=false)]
        public decimal AmountInGross { get; set; }

        /// <summary>
        /// The price of the quote in net.
        /// </summary>
        /// <value>The price of the quote in net.</value>
        [DataMember(Name="amountInNet", EmitDefaultValue=false)]
        public decimal AmountInNet { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public FeesDto Fees { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public long DateCreated { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public long LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuoteDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  AmountIn: ").Append(AmountIn).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  AmountOut: ").Append(AmountOut).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  QuoteStatus: ").Append(QuoteStatus).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  AcceptanceExpiryDate: ").Append(AcceptanceExpiryDate).Append("\n");
            sb.Append("  AcceptanceDate: ").Append(AcceptanceDate).Append("\n");
            sb.Append("  PaymentExpiryDate: ").Append(PaymentExpiryDate).Append("\n");
            sb.Append("  PaymentReceiptDate: ").Append(PaymentReceiptDate).Append("\n");
            sb.Append("  PayInLegs: ").Append(PayInLegs).Append("\n");
            sb.Append("  PayInMethod: ").Append(PayInMethod).Append("\n");
            sb.Append("  PayOutMethod: ").Append(PayOutMethod).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  PayOutInstruction: ").Append(PayOutInstruction).Append("\n");
            sb.Append("  PayInInstruction: ").Append(PayInInstruction).Append("\n");
            sb.Append("  UsePayInMethod: ").Append(UsePayInMethod).Append("\n");
            sb.Append("  UsePayOutMethod: ").Append(UsePayOutMethod).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  ProcessingFee: ").Append(ProcessingFee).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  AmountInGross: ").Append(AmountInGross).Append("\n");
            sb.Append("  AmountInNet: ").Append(AmountInNet).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuoteDto);
        }

        /// <summary>
        /// Returns true if QuoteDto instances are equal
        /// </summary>
        /// <param name="input">Instance of QuoteDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuoteDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.AmountIn == input.AmountIn ||
                    (this.AmountIn != null &&
                    this.AmountIn.Equals(input.AmountIn))
                ) && 
                (
                    this.AmountDue == input.AmountDue ||
                    (this.AmountDue != null &&
                    this.AmountDue.Equals(input.AmountDue))
                ) && 
                (
                    this.AmountOut == input.AmountOut ||
                    (this.AmountOut != null &&
                    this.AmountOut.Equals(input.AmountOut))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.QuoteStatus == input.QuoteStatus ||
                    (this.QuoteStatus != null &&
                    this.QuoteStatus.Equals(input.QuoteStatus))
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    (this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(input.PaymentStatus))
                ) && 
                (
                    this.AcceptanceExpiryDate == input.AcceptanceExpiryDate ||
                    (this.AcceptanceExpiryDate != null &&
                    this.AcceptanceExpiryDate.Equals(input.AcceptanceExpiryDate))
                ) && 
                (
                    this.AcceptanceDate == input.AcceptanceDate ||
                    (this.AcceptanceDate != null &&
                    this.AcceptanceDate.Equals(input.AcceptanceDate))
                ) && 
                (
                    this.PaymentExpiryDate == input.PaymentExpiryDate ||
                    (this.PaymentExpiryDate != null &&
                    this.PaymentExpiryDate.Equals(input.PaymentExpiryDate))
                ) && 
                (
                    this.PaymentReceiptDate == input.PaymentReceiptDate ||
                    (this.PaymentReceiptDate != null &&
                    this.PaymentReceiptDate.Equals(input.PaymentReceiptDate))
                ) && 
                (
                    this.PayInLegs == input.PayInLegs ||
                    this.PayInLegs != null &&
                    input.PayInLegs != null &&
                    this.PayInLegs.SequenceEqual(input.PayInLegs)
                ) && 
                (
                    this.PayInMethod == input.PayInMethod ||
                    (this.PayInMethod != null &&
                    this.PayInMethod.Equals(input.PayInMethod))
                ) && 
                (
                    this.PayOutMethod == input.PayOutMethod ||
                    (this.PayOutMethod != null &&
                    this.PayOutMethod.Equals(input.PayOutMethod))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.PayOutInstruction == input.PayOutInstruction ||
                    (this.PayOutInstruction != null &&
                    this.PayOutInstruction.Equals(input.PayOutInstruction))
                ) && 
                (
                    this.PayInInstruction == input.PayInInstruction ||
                    (this.PayInInstruction != null &&
                    this.PayInInstruction.Equals(input.PayInInstruction))
                ) && 
                (
                    this.UsePayInMethod == input.UsePayInMethod ||
                    (this.UsePayInMethod != null &&
                    this.UsePayInMethod.Equals(input.UsePayInMethod))
                ) && 
                (
                    this.UsePayOutMethod == input.UsePayOutMethod ||
                    (this.UsePayOutMethod != null &&
                    this.UsePayOutMethod.Equals(input.UsePayOutMethod))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.ProcessingFee == input.ProcessingFee ||
                    (this.ProcessingFee != null &&
                    this.ProcessingFee.Equals(input.ProcessingFee))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.NetPrice == input.NetPrice ||
                    (this.NetPrice != null &&
                    this.NetPrice.Equals(input.NetPrice))
                ) && 
                (
                    this.GrossPrice == input.GrossPrice ||
                    (this.GrossPrice != null &&
                    this.GrossPrice.Equals(input.GrossPrice))
                ) && 
                (
                    this.AmountInGross == input.AmountInGross ||
                    (this.AmountInGross != null &&
                    this.AmountInGross.Equals(input.AmountInGross))
                ) && 
                (
                    this.AmountInNet == input.AmountInNet ||
                    (this.AmountInNet != null &&
                    this.AmountInNet.Equals(input.AmountInNet))
                ) && 
                (
                    this.Fees == input.Fees ||
                    (this.Fees != null &&
                    this.Fees.Equals(input.Fees))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.AmountIn != null)
                    hashCode = hashCode * 59 + this.AmountIn.GetHashCode();
                if (this.AmountDue != null)
                    hashCode = hashCode * 59 + this.AmountDue.GetHashCode();
                if (this.AmountOut != null)
                    hashCode = hashCode * 59 + this.AmountOut.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.QuoteStatus != null)
                    hashCode = hashCode * 59 + this.QuoteStatus.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.AcceptanceExpiryDate != null)
                    hashCode = hashCode * 59 + this.AcceptanceExpiryDate.GetHashCode();
                if (this.AcceptanceDate != null)
                    hashCode = hashCode * 59 + this.AcceptanceDate.GetHashCode();
                if (this.PaymentExpiryDate != null)
                    hashCode = hashCode * 59 + this.PaymentExpiryDate.GetHashCode();
                if (this.PaymentReceiptDate != null)
                    hashCode = hashCode * 59 + this.PaymentReceiptDate.GetHashCode();
                if (this.PayInLegs != null)
                    hashCode = hashCode * 59 + this.PayInLegs.GetHashCode();
                if (this.PayInMethod != null)
                    hashCode = hashCode * 59 + this.PayInMethod.GetHashCode();
                if (this.PayOutMethod != null)
                    hashCode = hashCode * 59 + this.PayOutMethod.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.PayOutInstruction != null)
                    hashCode = hashCode * 59 + this.PayOutInstruction.GetHashCode();
                if (this.PayInInstruction != null)
                    hashCode = hashCode * 59 + this.PayInInstruction.GetHashCode();
                if (this.UsePayInMethod != null)
                    hashCode = hashCode * 59 + this.UsePayInMethod.GetHashCode();
                if (this.UsePayOutMethod != null)
                    hashCode = hashCode * 59 + this.UsePayOutMethod.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.ProcessingFee != null)
                    hashCode = hashCode * 59 + this.ProcessingFee.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.NetPrice != null)
                    hashCode = hashCode * 59 + this.NetPrice.GetHashCode();
                if (this.GrossPrice != null)
                    hashCode = hashCode * 59 + this.GrossPrice.GetHashCode();
                if (this.AmountInGross != null)
                    hashCode = hashCode * 59 + this.AmountInGross.GetHashCode();
                if (this.AmountInNet != null)
                    hashCode = hashCode * 59 + this.AmountInNet.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
