/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The currency options.
    /// </summary>
    [DataContract]
    public partial class CurrencyOptions :  IEquatable<CurrencyOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyOptions" /> class.
        /// </summary>
        /// <param name="transaction">View onchain transactions..</param>
        /// <param name="explorer">The explorer to view crypto network.</param>
        /// <param name="address">View wallet address.</param>
        /// <param name="confirmations">Number of confirmations needed..</param>
        public CurrencyOptions(string transaction = default(string), string explorer = default(string), string address = default(string), int confirmations = default(int))
        {
            this.Transaction = transaction;
            this.Explorer = explorer;
            this.Address = address;
            this.Confirmations = confirmations;
        }

        /// <summary>
        /// View onchain transactions.
        /// </summary>
        /// <value>View onchain transactions.</value>
        [DataMember(Name="transaction", EmitDefaultValue=false)]
        public string Transaction { get; set; }

        /// <summary>
        /// The explorer to view crypto network
        /// </summary>
        /// <value>The explorer to view crypto network</value>
        [DataMember(Name="explorer", EmitDefaultValue=false)]
        public string Explorer { get; set; }

        /// <summary>
        /// View wallet address
        /// </summary>
        /// <value>View wallet address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Number of confirmations needed.
        /// </summary>
        /// <value>Number of confirmations needed.</value>
        [DataMember(Name="confirmations", EmitDefaultValue=false)]
        public int Confirmations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyOptions {\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  Explorer: ").Append(Explorer).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Confirmations: ").Append(Confirmations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyOptions);
        }

        /// <summary>
        /// Returns true if CurrencyOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Transaction == input.Transaction ||
                    (this.Transaction != null &&
                    this.Transaction.Equals(input.Transaction))
                ) && 
                (
                    this.Explorer == input.Explorer ||
                    (this.Explorer != null &&
                    this.Explorer.Equals(input.Explorer))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Confirmations == input.Confirmations ||
                    (this.Confirmations != null &&
                    this.Confirmations.Equals(input.Confirmations))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Transaction != null)
                    hashCode = hashCode * 59 + this.Transaction.GetHashCode();
                if (this.Explorer != null)
                    hashCode = hashCode * 59 + this.Explorer.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Confirmations != null)
                    hashCode = hashCode * 59 + this.Confirmations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
