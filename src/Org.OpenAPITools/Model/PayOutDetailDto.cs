/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The payment out details, only needed when \&quot;type\&quot; is OUT
    /// </summary>
    [DataContract]
    public partial class PayOutDetailDto :  IEquatable<PayOutDetailDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayOutDetailDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayOutDetailDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayOutDetailDto" /> class.
        /// </summary>
        /// <param name="code">The gateway to be used, &#39;crypto&#39; or &#39;wallet&#39;. (required).</param>
        /// <param name="currency">The currency acronym payout needs to be made in. (required).</param>
        /// <param name="address">The address to withdrawal funds to. (required).</param>
        /// <param name="tag">This is a payment destination tag. This fields isn&#39;t null when the paidCurrency currency value is XRP..</param>
        /// <param name="protocol">The protocol behind a currency, &#39;ERC20&#39; or &#39;TRC20&#39;..</param>
        public PayOutDetailDto(string code = default(string), string currency = default(string), string address = default(string), string tag = default(string), string protocol = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for PayOutDetailDto and cannot be null");
            }
            else
            {
                this.Code = code;
            }

            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for PayOutDetailDto and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }

            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for PayOutDetailDto and cannot be null");
            }
            else
            {
                this.Address = address;
            }

            this.Tag = tag;
            this.Protocol = protocol;
        }

        /// <summary>
        /// The gateway to be used, &#39;crypto&#39; or &#39;wallet&#39;.
        /// </summary>
        /// <value>The gateway to be used, &#39;crypto&#39; or &#39;wallet&#39;.</value>
        [DataMember(Name="code", EmitDefaultValue=true)]
        public string Code { get; set; }

        /// <summary>
        /// The currency acronym payout needs to be made in.
        /// </summary>
        /// <value>The currency acronym payout needs to be made in.</value>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string Currency { get; set; }

        /// <summary>
        /// The address to withdrawal funds to.
        /// </summary>
        /// <value>The address to withdrawal funds to.</value>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public string Address { get; set; }

        /// <summary>
        /// This is a payment destination tag. This fields isn&#39;t null when the paidCurrency currency value is XRP.
        /// </summary>
        /// <value>This is a payment destination tag. This fields isn&#39;t null when the paidCurrency currency value is XRP.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// The protocol behind a currency, &#39;ERC20&#39; or &#39;TRC20&#39;.
        /// </summary>
        /// <value>The protocol behind a currency, &#39;ERC20&#39; or &#39;TRC20&#39;.</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayOutDetailDto {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayOutDetailDto);
        }

        /// <summary>
        /// Returns true if PayOutDetailDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PayOutDetailDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayOutDetailDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Currency (string) maxLength
            if(this.Currency != null && this.Currency.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 20.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if(this.Currency != null && this.Currency.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be greater than 2.", new [] { "Currency" });
            }

            yield break;
        }
    }

}
