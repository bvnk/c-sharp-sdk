/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MerchantChannelDto
    /// </summary>
    [DataContract]
    public partial class MerchantChannelDto :  IEquatable<MerchantChannelDto>, IValidatableObject
    {
        /// <summary>
        /// The status of the channel.
        /// </summary>
        /// <value>The status of the channel.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum OPEN for value: OPEN
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN = 1,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 2

        }

        /// <summary>
        /// The status of the channel.
        /// </summary>
        /// <value>The status of the channel.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantChannelDto" /> class.
        /// </summary>
        /// <param name="id">The UUID of the channel. (default to 0).</param>
        /// <param name="dateCreated">The date and time, encoded into UNIX epoch timestamps. (default to 0).</param>
        /// <param name="lastUpdated">The date and time, encoded into UNIX epoch timestamps. (default to 0).</param>
        /// <param name="merchantId">The merchant ID linked to the channel..</param>
        /// <param name="walletCurrency">The wallet currency of the channel..</param>
        /// <param name="displayCurrency">The display currency of the channel..</param>
        /// <param name="payCurrency">The payed currency of the channel..</param>
        /// <param name="address">The address of the channel.</param>
        /// <param name="tag">The tag for payments.</param>
        /// <param name="protocol">The protocol of the channel..</param>
        /// <param name="reference">The custom reference for the channel payment..</param>
        /// <param name="status">The status of the channel..</param>
        /// <param name="uuid">The UUID of the channel..</param>
        /// <param name="redirectUrl">The redirect URL to the channel payment page..</param>
        /// <param name="uri">The URI of the address for QR code.</param>
        /// <param name="alternatives">alternatives.</param>
        public MerchantChannelDto(int id = 0, int dateCreated = 0, int lastUpdated = 0, string merchantId = default(string), string walletCurrency = default(string), string displayCurrency = default(string), string payCurrency = default(string), string address = default(string), string tag = default(string), string protocol = default(string), string reference = default(string), StatusEnum? status = default(StatusEnum?), string uuid = default(string), string redirectUrl = default(string), string uri = default(string), List<AlternativeAddressDto> alternatives = default(List<AlternativeAddressDto>))
        {
            // use default value if no "id" provided
            if (id == null)
            {
                this.Id = 0;
            }
            else
            {
                this.Id = id;
            }
            // use default value if no "dateCreated" provided
            if (dateCreated == null)
            {
                this.DateCreated = 0;
            }
            else
            {
                this.DateCreated = dateCreated;
            }
            // use default value if no "lastUpdated" provided
            if (lastUpdated == null)
            {
                this.LastUpdated = 0;
            }
            else
            {
                this.LastUpdated = lastUpdated;
            }
            this.MerchantId = merchantId;
            this.WalletCurrency = walletCurrency;
            this.DisplayCurrency = displayCurrency;
            this.PayCurrency = payCurrency;
            this.Address = address;
            this.Tag = tag;
            this.Protocol = protocol;
            this.Reference = reference;
            this.Status = status;
            this.Uuid = uuid;
            this.RedirectUrl = redirectUrl;
            this.Uri = uri;
            this.Alternatives = alternatives;
        }

        /// <summary>
        /// The UUID of the channel.
        /// </summary>
        /// <value>The UUID of the channel.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public int DateCreated { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public int LastUpdated { get; set; }

        /// <summary>
        /// The merchant ID linked to the channel.
        /// </summary>
        /// <value>The merchant ID linked to the channel.</value>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The wallet currency of the channel.
        /// </summary>
        /// <value>The wallet currency of the channel.</value>
        [DataMember(Name="walletCurrency", EmitDefaultValue=false)]
        public string WalletCurrency { get; set; }

        /// <summary>
        /// The display currency of the channel.
        /// </summary>
        /// <value>The display currency of the channel.</value>
        [DataMember(Name="displayCurrency", EmitDefaultValue=false)]
        public string DisplayCurrency { get; set; }

        /// <summary>
        /// The payed currency of the channel.
        /// </summary>
        /// <value>The payed currency of the channel.</value>
        [DataMember(Name="payCurrency", EmitDefaultValue=false)]
        public string PayCurrency { get; set; }

        /// <summary>
        /// The address of the channel
        /// </summary>
        /// <value>The address of the channel</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The tag for payments
        /// </summary>
        /// <value>The tag for payments</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// The protocol of the channel.
        /// </summary>
        /// <value>The protocol of the channel.</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// The custom reference for the channel payment.
        /// </summary>
        /// <value>The custom reference for the channel payment.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }


        /// <summary>
        /// The UUID of the channel.
        /// </summary>
        /// <value>The UUID of the channel.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The redirect URL to the channel payment page.
        /// </summary>
        /// <value>The redirect URL to the channel payment page.</value>
        [DataMember(Name="redirectUrl", EmitDefaultValue=false)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// The URI of the address for QR code
        /// </summary>
        /// <value>The URI of the address for QR code</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets Alternatives
        /// </summary>
        [DataMember(Name="alternatives", EmitDefaultValue=false)]
        public List<AlternativeAddressDto> Alternatives { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerchantChannelDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  WalletCurrency: ").Append(WalletCurrency).Append("\n");
            sb.Append("  DisplayCurrency: ").Append(DisplayCurrency).Append("\n");
            sb.Append("  PayCurrency: ").Append(PayCurrency).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Alternatives: ").Append(Alternatives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantChannelDto);
        }

        /// <summary>
        /// Returns true if MerchantChannelDto instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantChannelDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantChannelDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.WalletCurrency == input.WalletCurrency ||
                    (this.WalletCurrency != null &&
                    this.WalletCurrency.Equals(input.WalletCurrency))
                ) && 
                (
                    this.DisplayCurrency == input.DisplayCurrency ||
                    (this.DisplayCurrency != null &&
                    this.DisplayCurrency.Equals(input.DisplayCurrency))
                ) && 
                (
                    this.PayCurrency == input.PayCurrency ||
                    (this.PayCurrency != null &&
                    this.PayCurrency.Equals(input.PayCurrency))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Alternatives == input.Alternatives ||
                    this.Alternatives != null &&
                    input.Alternatives != null &&
                    this.Alternatives.SequenceEqual(input.Alternatives)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.WalletCurrency != null)
                    hashCode = hashCode * 59 + this.WalletCurrency.GetHashCode();
                if (this.DisplayCurrency != null)
                    hashCode = hashCode * 59 + this.DisplayCurrency.GetHashCode();
                if (this.PayCurrency != null)
                    hashCode = hashCode * 59 + this.PayCurrency.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.RedirectUrl != null)
                    hashCode = hashCode * 59 + this.RedirectUrl.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Alternatives != null)
                    hashCode = hashCode * 59 + this.Alternatives.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
