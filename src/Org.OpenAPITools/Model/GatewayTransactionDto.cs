/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The specific details about transactions,  onchain or offchain, linked to the payment.
    /// </summary>
    [DataContract]
    public partial class GatewayTransactionDto :  IEquatable<GatewayTransactionDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayTransactionDto" /> class.
        /// </summary>
        /// <param name="dateCreated">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="dateConfirmed">The date and time, encoded into UNIX epoch timestamps..</param>
        /// <param name="hash">Transaction hash..</param>
        /// <param name="amount">The payment amount..</param>
        /// <param name="risk">risk.</param>
        /// <param name="networkFeeCurrency">The currency acronym..</param>
        /// <param name="networkFeeAmount">The network fee amount..</param>
        /// <param name="sources">The list of source addresses, only applicable if payment in..</param>
        /// <param name="displayRate">displayRate.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        public GatewayTransactionDto(long dateCreated = default(long), long dateConfirmed = default(long), string hash = default(string), decimal amount = default(decimal), Object risk = default(Object), string networkFeeCurrency = default(string), decimal networkFeeAmount = default(decimal), List<string> sources = default(List<string>), ExchangeRateDto displayRate = default(ExchangeRateDto), ExchangeRateDto exchangeRate = default(ExchangeRateDto))
        {
            this.DateCreated = dateCreated;
            this.DateConfirmed = dateConfirmed;
            this.Hash = hash;
            this.Amount = amount;
            this.Risk = risk;
            this.NetworkFeeCurrency = networkFeeCurrency;
            this.NetworkFeeAmount = networkFeeAmount;
            this.Sources = sources;
            this.DisplayRate = displayRate;
            this.ExchangeRate = exchangeRate;
        }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public long DateCreated { get; set; }

        /// <summary>
        /// The date and time, encoded into UNIX epoch timestamps.
        /// </summary>
        /// <value>The date and time, encoded into UNIX epoch timestamps.</value>
        [DataMember(Name="dateConfirmed", EmitDefaultValue=false)]
        public long DateConfirmed { get; set; }

        /// <summary>
        /// Transaction hash.
        /// </summary>
        /// <value>Transaction hash.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// The payment amount.
        /// </summary>
        /// <value>The payment amount.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets Risk
        /// </summary>
        [DataMember(Name="risk", EmitDefaultValue=false)]
        public Object Risk { get; set; }

        /// <summary>
        /// The currency acronym.
        /// </summary>
        /// <value>The currency acronym.</value>
        [DataMember(Name="networkFeeCurrency", EmitDefaultValue=false)]
        public string NetworkFeeCurrency { get; set; }

        /// <summary>
        /// The network fee amount.
        /// </summary>
        /// <value>The network fee amount.</value>
        [DataMember(Name="networkFeeAmount", EmitDefaultValue=false)]
        public decimal NetworkFeeAmount { get; set; }

        /// <summary>
        /// The list of source addresses, only applicable if payment in.
        /// </summary>
        /// <value>The list of source addresses, only applicable if payment in.</value>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        public List<string> Sources { get; set; }

        /// <summary>
        /// Gets or Sets DisplayRate
        /// </summary>
        [DataMember(Name="displayRate", EmitDefaultValue=false)]
        public ExchangeRateDto DisplayRate { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public ExchangeRateDto ExchangeRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GatewayTransactionDto {\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateConfirmed: ").Append(DateConfirmed).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  NetworkFeeCurrency: ").Append(NetworkFeeCurrency).Append("\n");
            sb.Append("  NetworkFeeAmount: ").Append(NetworkFeeAmount).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("  DisplayRate: ").Append(DisplayRate).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayTransactionDto);
        }

        /// <summary>
        /// Returns true if GatewayTransactionDto instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayTransactionDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayTransactionDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.DateConfirmed == input.DateConfirmed ||
                    (this.DateConfirmed != null &&
                    this.DateConfirmed.Equals(input.DateConfirmed))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Risk == input.Risk ||
                    (this.Risk != null &&
                    this.Risk.Equals(input.Risk))
                ) && 
                (
                    this.NetworkFeeCurrency == input.NetworkFeeCurrency ||
                    (this.NetworkFeeCurrency != null &&
                    this.NetworkFeeCurrency.Equals(input.NetworkFeeCurrency))
                ) && 
                (
                    this.NetworkFeeAmount == input.NetworkFeeAmount ||
                    (this.NetworkFeeAmount != null &&
                    this.NetworkFeeAmount.Equals(input.NetworkFeeAmount))
                ) && 
                (
                    this.Sources == input.Sources ||
                    this.Sources != null &&
                    input.Sources != null &&
                    this.Sources.SequenceEqual(input.Sources)
                ) && 
                (
                    this.DisplayRate == input.DisplayRate ||
                    (this.DisplayRate != null &&
                    this.DisplayRate.Equals(input.DisplayRate))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.DateConfirmed != null)
                    hashCode = hashCode * 59 + this.DateConfirmed.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Risk != null)
                    hashCode = hashCode * 59 + this.Risk.GetHashCode();
                if (this.NetworkFeeCurrency != null)
                    hashCode = hashCode * 59 + this.NetworkFeeCurrency.GetHashCode();
                if (this.NetworkFeeAmount != null)
                    hashCode = hashCode * 59 + this.NetworkFeeAmount.GetHashCode();
                if (this.Sources != null)
                    hashCode = hashCode * 59 + this.Sources.GetHashCode();
                if (this.DisplayRate != null)
                    hashCode = hashCode * 59 + this.DisplayRate.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
