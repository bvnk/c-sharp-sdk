/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BalanceDto
    /// </summary>
    [DataContract]
    public partial class BalanceDto :  IEquatable<BalanceDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceDto" /> class.
        /// </summary>
        /// <param name="currency">currency.</param>
        /// <param name="walletId">The ID of the wallet..</param>
        /// <param name="available">The available balance on the wallet..</param>
        /// <param name="reserved">The reserved balance on the wallet..</param>
        /// <param name="convertedAvailable">The converted available balance on the wallet..</param>
        /// <param name="convertedReserved">The converted reserved balance on the wallet..</param>
        /// <param name="total">The total amount on the wallet..</param>
        public BalanceDto(CurrencyDto currency = default(CurrencyDto), long walletId = default(long), decimal available = default(decimal), decimal reserved = default(decimal), decimal convertedAvailable = default(decimal), decimal convertedReserved = default(decimal), decimal total = default(decimal))
        {
            this.Currency = currency;
            this.WalletId = walletId;
            this.Available = available;
            this.Reserved = reserved;
            this.ConvertedAvailable = convertedAvailable;
            this.ConvertedReserved = convertedReserved;
            this.Total = total;
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public CurrencyDto Currency { get; set; }

        /// <summary>
        /// The ID of the wallet.
        /// </summary>
        /// <value>The ID of the wallet.</value>
        [DataMember(Name="walletId", EmitDefaultValue=false)]
        public long WalletId { get; set; }

        /// <summary>
        /// The available balance on the wallet.
        /// </summary>
        /// <value>The available balance on the wallet.</value>
        [DataMember(Name="available", EmitDefaultValue=false)]
        public decimal Available { get; set; }

        /// <summary>
        /// The reserved balance on the wallet.
        /// </summary>
        /// <value>The reserved balance on the wallet.</value>
        [DataMember(Name="reserved", EmitDefaultValue=false)]
        public decimal Reserved { get; set; }

        /// <summary>
        /// The converted available balance on the wallet.
        /// </summary>
        /// <value>The converted available balance on the wallet.</value>
        [DataMember(Name="convertedAvailable", EmitDefaultValue=false)]
        public decimal ConvertedAvailable { get; set; }

        /// <summary>
        /// The converted reserved balance on the wallet.
        /// </summary>
        /// <value>The converted reserved balance on the wallet.</value>
        [DataMember(Name="convertedReserved", EmitDefaultValue=false)]
        public decimal ConvertedReserved { get; set; }

        /// <summary>
        /// The total amount on the wallet.
        /// </summary>
        /// <value>The total amount on the wallet.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public decimal Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BalanceDto {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  WalletId: ").Append(WalletId).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Reserved: ").Append(Reserved).Append("\n");
            sb.Append("  ConvertedAvailable: ").Append(ConvertedAvailable).Append("\n");
            sb.Append("  ConvertedReserved: ").Append(ConvertedReserved).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BalanceDto);
        }

        /// <summary>
        /// Returns true if BalanceDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BalanceDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BalanceDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.WalletId == input.WalletId ||
                    (this.WalletId != null &&
                    this.WalletId.Equals(input.WalletId))
                ) && 
                (
                    this.Available == input.Available ||
                    (this.Available != null &&
                    this.Available.Equals(input.Available))
                ) && 
                (
                    this.Reserved == input.Reserved ||
                    (this.Reserved != null &&
                    this.Reserved.Equals(input.Reserved))
                ) && 
                (
                    this.ConvertedAvailable == input.ConvertedAvailable ||
                    (this.ConvertedAvailable != null &&
                    this.ConvertedAvailable.Equals(input.ConvertedAvailable))
                ) && 
                (
                    this.ConvertedReserved == input.ConvertedReserved ||
                    (this.ConvertedReserved != null &&
                    this.ConvertedReserved.Equals(input.ConvertedReserved))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.WalletId != null)
                    hashCode = hashCode * 59 + this.WalletId.GetHashCode();
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.Reserved != null)
                    hashCode = hashCode * 59 + this.Reserved.GetHashCode();
                if (this.ConvertedAvailable != null)
                    hashCode = hashCode * 59 + this.ConvertedAvailable.GetHashCode();
                if (this.ConvertedReserved != null)
                    hashCode = hashCode * 59 + this.ConvertedReserved.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
