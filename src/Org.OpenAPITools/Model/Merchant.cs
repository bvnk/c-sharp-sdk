/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Merchant
    /// </summary>
    [DataContract]
    public partial class Merchant :  IEquatable<Merchant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchant" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="secret">secret.</param>
        /// <param name="webhookUrl">webhookUrl.</param>
        /// <param name="autoConvertInvalidPayments">autoConvertInvalidPayments (default to true).</param>
        /// <param name="defaultExpiryMinutes">defaultExpiryMinutes.</param>
        /// <param name="webhookVersion">webhookVersion.</param>
        /// <param name="wallet">wallet.</param>
        /// <param name="emailRecipients">emailRecipients.</param>
        public Merchant(long id = default(long), string merchantId = default(string), string displayName = default(string), string secret = default(string), string webhookUrl = default(string), bool autoConvertInvalidPayments = true, int defaultExpiryMinutes = default(int), int webhookVersion = default(int), Wallet wallet = default(Wallet), string emailRecipients = default(string))
        {
            this.Id = id;
            this.MerchantId = merchantId;
            this.DisplayName = displayName;
            this.Secret = secret;
            this.WebhookUrl = webhookUrl;
            // use default value if no "autoConvertInvalidPayments" provided
            if (autoConvertInvalidPayments == null)
            {
                this.AutoConvertInvalidPayments = true;
            }
            else
            {
                this.AutoConvertInvalidPayments = autoConvertInvalidPayments;
            }
            this.DefaultExpiryMinutes = defaultExpiryMinutes;
            this.WebhookVersion = webhookVersion;
            this.Wallet = wallet;
            this.EmailRecipients = emailRecipients;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name="webhookUrl", EmitDefaultValue=false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets AutoConvertInvalidPayments
        /// </summary>
        [DataMember(Name="autoConvertInvalidPayments", EmitDefaultValue=false)]
        public bool AutoConvertInvalidPayments { get; set; }

        /// <summary>
        /// Gets or Sets DefaultExpiryMinutes
        /// </summary>
        [DataMember(Name="defaultExpiryMinutes", EmitDefaultValue=false)]
        public int DefaultExpiryMinutes { get; set; }

        /// <summary>
        /// Gets or Sets WebhookVersion
        /// </summary>
        [DataMember(Name="webhookVersion", EmitDefaultValue=false)]
        public int WebhookVersion { get; set; }

        /// <summary>
        /// Gets or Sets Wallet
        /// </summary>
        [DataMember(Name="wallet", EmitDefaultValue=false)]
        public Wallet Wallet { get; set; }

        /// <summary>
        /// Gets or Sets EmailRecipients
        /// </summary>
        [DataMember(Name="emailRecipients", EmitDefaultValue=false)]
        public string EmailRecipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Merchant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  AutoConvertInvalidPayments: ").Append(AutoConvertInvalidPayments).Append("\n");
            sb.Append("  DefaultExpiryMinutes: ").Append(DefaultExpiryMinutes).Append("\n");
            sb.Append("  WebhookVersion: ").Append(WebhookVersion).Append("\n");
            sb.Append("  Wallet: ").Append(Wallet).Append("\n");
            sb.Append("  EmailRecipients: ").Append(EmailRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Merchant);
        }

        /// <summary>
        /// Returns true if Merchant instances are equal
        /// </summary>
        /// <param name="input">Instance of Merchant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Merchant input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.WebhookUrl == input.WebhookUrl ||
                    (this.WebhookUrl != null &&
                    this.WebhookUrl.Equals(input.WebhookUrl))
                ) && 
                (
                    this.AutoConvertInvalidPayments == input.AutoConvertInvalidPayments ||
                    (this.AutoConvertInvalidPayments != null &&
                    this.AutoConvertInvalidPayments.Equals(input.AutoConvertInvalidPayments))
                ) && 
                (
                    this.DefaultExpiryMinutes == input.DefaultExpiryMinutes ||
                    (this.DefaultExpiryMinutes != null &&
                    this.DefaultExpiryMinutes.Equals(input.DefaultExpiryMinutes))
                ) && 
                (
                    this.WebhookVersion == input.WebhookVersion ||
                    (this.WebhookVersion != null &&
                    this.WebhookVersion.Equals(input.WebhookVersion))
                ) && 
                (
                    this.Wallet == input.Wallet ||
                    (this.Wallet != null &&
                    this.Wallet.Equals(input.Wallet))
                ) && 
                (
                    this.EmailRecipients == input.EmailRecipients ||
                    (this.EmailRecipients != null &&
                    this.EmailRecipients.Equals(input.EmailRecipients))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Secret != null)
                    hashCode = hashCode * 59 + this.Secret.GetHashCode();
                if (this.WebhookUrl != null)
                    hashCode = hashCode * 59 + this.WebhookUrl.GetHashCode();
                if (this.AutoConvertInvalidPayments != null)
                    hashCode = hashCode * 59 + this.AutoConvertInvalidPayments.GetHashCode();
                if (this.DefaultExpiryMinutes != null)
                    hashCode = hashCode * 59 + this.DefaultExpiryMinutes.GetHashCode();
                if (this.WebhookVersion != null)
                    hashCode = hashCode * 59 + this.WebhookVersion.GetHashCode();
                if (this.Wallet != null)
                    hashCode = hashCode * 59 + this.Wallet.GetHashCode();
                if (this.EmailRecipients != null)
                    hashCode = hashCode * 59 + this.EmailRecipients.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
