/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Payment address details
    /// </summary>
    [DataContract]
    public partial class CryptoAddressDto :  IEquatable<CryptoAddressDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoAddressDto" /> class.
        /// </summary>
        /// <param name="address">The crypto address to send funds to.</param>
        /// <param name="tag">This is a payment destination tag. This fields isn&#39;t null when the paidCurrency currency value is XRP..</param>
        /// <param name="protocol">The protocol behind a currency, &#39;ERC20&#39; or &#39;TRC20&#39;..</param>
        /// <param name="uri">The destination address URI for QR code.</param>
        /// <param name="alternatives">The list of non-default addresses for other tokens.</param>
        public CryptoAddressDto(string address = default(string), string tag = default(string), string protocol = default(string), string uri = default(string), List<AlternativeAddressDto> alternatives = default(List<AlternativeAddressDto>))
        {
            this.Address = address;
            this.Tag = tag;
            this.Protocol = protocol;
            this.Uri = uri;
            this.Alternatives = alternatives;
        }

        /// <summary>
        /// The crypto address to send funds to
        /// </summary>
        /// <value>The crypto address to send funds to</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// This is a payment destination tag. This fields isn&#39;t null when the paidCurrency currency value is XRP.
        /// </summary>
        /// <value>This is a payment destination tag. This fields isn&#39;t null when the paidCurrency currency value is XRP.</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// The protocol behind a currency, &#39;ERC20&#39; or &#39;TRC20&#39;.
        /// </summary>
        /// <value>The protocol behind a currency, &#39;ERC20&#39; or &#39;TRC20&#39;.</value>
        [DataMember(Name="protocol", EmitDefaultValue=false)]
        public string Protocol { get; set; }

        /// <summary>
        /// The destination address URI for QR code
        /// </summary>
        /// <value>The destination address URI for QR code</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The list of non-default addresses for other tokens
        /// </summary>
        /// <value>The list of non-default addresses for other tokens</value>
        [DataMember(Name="alternatives", EmitDefaultValue=false)]
        public List<AlternativeAddressDto> Alternatives { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CryptoAddressDto {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Alternatives: ").Append(Alternatives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptoAddressDto);
        }

        /// <summary>
        /// Returns true if CryptoAddressDto instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptoAddressDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptoAddressDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Alternatives == input.Alternatives ||
                    this.Alternatives != null &&
                    input.Alternatives != null &&
                    this.Alternatives.SequenceEqual(input.Alternatives)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Alternatives != null)
                    hashCode = hashCode * 59 + this.Alternatives.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
