/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The request data required to create a payment in or a payment out
    /// </summary>
    [DataContract]
    public partial class PayRequestDto :  IEquatable<PayRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public DirectionDto Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayRequestDto" /> class.
        /// </summary>
        /// <param name="merchantId">Your Merchant ID. You can find it on the Merchant Details page in your account. (required) (default to &quot;5C8D8D78-366A-4AFB-B658-A64CE543C5DB&quot;).</param>
        /// <param name="amount">The payment amount. (required) (default to 223.05M).</param>
        /// <param name="expiryMinutes">The time period after which payment expires. (default to 20).</param>
        /// <param name="currency">The currency acronym. (required) (default to &quot;EUR&quot;).</param>
        /// <param name="returnUrl">The URL that the customer will be redirected to if they click &#39;Back to Merchant&#39; button on the payment web page. (default to &quot;https://my-shop.com/payment-complete?ref&#x3D;xyz&quot;).</param>
        /// <param name="reference">The custom payment reference ID to tie the payment to your customer. (required) (default to &quot;myUniqueRef333&quot;).</param>
        /// <param name="type">type (required).</param>
        /// <param name="payInDetails">payInDetails.</param>
        /// <param name="payOutDetails">payOutDetails.</param>
        public PayRequestDto(string merchantId = "5C8D8D78-366A-4AFB-B658-A64CE543C5DB", decimal amount = 223.05M, int expiryMinutes = 20, string currency = "EUR", string returnUrl = "https://my-shop.com/payment-complete?ref=xyz", string reference = "myUniqueRef333", DirectionDto type = default(DirectionDto), PayInDetailDto payInDetails = default(PayInDetailDto), PayOutDetailDto payOutDetails = default(PayOutDetailDto))
        {
            // to ensure "merchantId" is required (not null)
            if (merchantId == null)
            {
                throw new InvalidDataException("merchantId is a required property for PayRequestDto and cannot be null");
            }
            else
            {
                this.MerchantId = merchantId;
            }

            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for PayRequestDto and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }

            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for PayRequestDto and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }

            // to ensure "reference" is required (not null)
            if (reference == null)
            {
                throw new InvalidDataException("reference is a required property for PayRequestDto and cannot be null");
            }
            else
            {
                this.Reference = reference;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PayRequestDto and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // use default value if no "expiryMinutes" provided
            if (expiryMinutes == null)
            {
                this.ExpiryMinutes = 20;
            }
            else
            {
                this.ExpiryMinutes = expiryMinutes;
            }
            // use default value if no "returnUrl" provided
            if (returnUrl == null)
            {
                this.ReturnUrl = "https://my-shop.com/payment-complete?ref=xyz";
            }
            else
            {
                this.ReturnUrl = returnUrl;
            }
            this.PayInDetails = payInDetails;
            this.PayOutDetails = payOutDetails;
        }

        /// <summary>
        /// Your Merchant ID. You can find it on the Merchant Details page in your account.
        /// </summary>
        /// <value>Your Merchant ID. You can find it on the Merchant Details page in your account.</value>
        [DataMember(Name="merchantId", EmitDefaultValue=true)]
        public string MerchantId { get; set; }

        /// <summary>
        /// The payment amount.
        /// </summary>
        /// <value>The payment amount.</value>
        [DataMember(Name="amount", EmitDefaultValue=true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// The time period after which payment expires.
        /// </summary>
        /// <value>The time period after which payment expires.</value>
        [DataMember(Name="expiryMinutes", EmitDefaultValue=false)]
        public int ExpiryMinutes { get; set; }

        /// <summary>
        /// The currency acronym.
        /// </summary>
        /// <value>The currency acronym.</value>
        [DataMember(Name="currency", EmitDefaultValue=true)]
        public string Currency { get; set; }

        /// <summary>
        /// The URL that the customer will be redirected to if they click &#39;Back to Merchant&#39; button on the payment web page.
        /// </summary>
        /// <value>The URL that the customer will be redirected to if they click &#39;Back to Merchant&#39; button on the payment web page.</value>
        [DataMember(Name="returnUrl", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// The custom payment reference ID to tie the payment to your customer.
        /// </summary>
        /// <value>The custom payment reference ID to tie the payment to your customer.</value>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }


        /// <summary>
        /// Gets or Sets PayInDetails
        /// </summary>
        [DataMember(Name="payInDetails", EmitDefaultValue=false)]
        public PayInDetailDto PayInDetails { get; set; }

        /// <summary>
        /// Gets or Sets PayOutDetails
        /// </summary>
        [DataMember(Name="payOutDetails", EmitDefaultValue=false)]
        public PayOutDetailDto PayOutDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayRequestDto {\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExpiryMinutes: ").Append(ExpiryMinutes).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PayInDetails: ").Append(PayInDetails).Append("\n");
            sb.Append("  PayOutDetails: ").Append(PayOutDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayRequestDto);
        }

        /// <summary>
        /// Returns true if PayRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PayRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayRequestDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ExpiryMinutes == input.ExpiryMinutes ||
                    (this.ExpiryMinutes != null &&
                    this.ExpiryMinutes.Equals(input.ExpiryMinutes))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PayInDetails == input.PayInDetails ||
                    (this.PayInDetails != null &&
                    this.PayInDetails.Equals(input.PayInDetails))
                ) && 
                (
                    this.PayOutDetails == input.PayOutDetails ||
                    (this.PayOutDetails != null &&
                    this.PayOutDetails.Equals(input.PayOutDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ExpiryMinutes != null)
                    hashCode = hashCode * 59 + this.ExpiryMinutes.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PayInDetails != null)
                    hashCode = hashCode * 59 + this.PayInDetails.GetHashCode();
                if (this.PayOutDetails != null)
                    hashCode = hashCode * 59 + this.PayOutDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 50.", new [] { "MerchantId" });
            }

            // MerchantId (string) minLength
            if(this.MerchantId != null && this.MerchantId.Length < 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be greater than 6.", new [] { "MerchantId" });
            }



            // Amount (decimal) minimum
            if(this.Amount < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.", new [] { "Amount" });
            }

            // Currency (string) maxLength
            if(this.Currency != null && this.Currency.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 20.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if(this.Currency != null && this.Currency.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be greater than 2.", new [] { "Currency" });
            }

            // Reference (string) maxLength
            if(this.Reference != null && this.Reference.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 255.", new [] { "Reference" });
            }

            // Reference (string) minLength
            if(this.Reference != null && this.Reference.Length < 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be greater than 6.", new [] { "Reference" });
            }

            yield break;
        }
    }

}
