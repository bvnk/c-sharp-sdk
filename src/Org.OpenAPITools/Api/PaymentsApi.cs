/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        /// Creates a payment, either type IN or type OUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <returns>SummaryPaymentDto</returns>
        SummaryPaymentDto PaymentCreate (PayRequestDto payRequestDto);

        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        /// Creates a payment, either type IN or type OUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <returns>ApiResponse of SummaryPaymentDto</returns>
        ApiResponse<SummaryPaymentDto> PaymentCreateWithHttpInfo (PayRequestDto payRequestDto);
        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <returns>List<SummaryPaymentDto></returns>
        List<SummaryPaymentDto> PaymentList (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string));

        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <returns>ApiResponse of List<SummaryPaymentDto></returns>
        ApiResponse<List<SummaryPaymentDto>> PaymentListWithHttpInfo (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string));
        /// <summary>
        /// Validate Address
        /// </summary>
        /// <remarks>
        /// Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <returns></returns>
        void PaymentOutValidate (PayOutDetailDto payOutDetailDto);

        /// <summary>
        /// Validate Address
        /// </summary>
        /// <remarks>
        /// Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PaymentOutValidateWithHttpInfo (PayOutDetailDto payOutDetailDto);
        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific payment using the UUID of the payment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <returns>SummaryPaymentDto</returns>
        SummaryPaymentDto PaymentRead (string uuid);

        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific payment using the UUID of the payment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <returns>ApiResponse of SummaryPaymentDto</returns>
        ApiResponse<SummaryPaymentDto> PaymentReadWithHttpInfo (string uuid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        /// Creates a payment, either type IN or type OUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SummaryPaymentDto</returns>
        System.Threading.Tasks.Task<SummaryPaymentDto> PaymentCreateAsync (PayRequestDto payRequestDto, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        /// Creates a payment, either type IN or type OUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SummaryPaymentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummaryPaymentDto>> PaymentCreateWithHttpInfoAsync (PayRequestDto payRequestDto, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<SummaryPaymentDto></returns>
        System.Threading.Tasks.Task<List<SummaryPaymentDto>> PaymentListAsync (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SummaryPaymentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SummaryPaymentDto>>> PaymentListWithHttpInfoAsync (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Validate Address
        /// </summary>
        /// <remarks>
        /// Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PaymentOutValidateAsync (PayOutDetailDto payOutDetailDto, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validate Address
        /// </summary>
        /// <remarks>
        /// Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PaymentOutValidateWithHttpInfoAsync (PayOutDetailDto payOutDetailDto, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific payment using the UUID of the payment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SummaryPaymentDto</returns>
        System.Threading.Tasks.Task<SummaryPaymentDto> PaymentReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Payment
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific payment using the UUID of the payment.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SummaryPaymentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummaryPaymentDto>> PaymentReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create payment Creates a payment, either type IN or type OUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <returns>SummaryPaymentDto</returns>
        public SummaryPaymentDto PaymentCreate (PayRequestDto payRequestDto)
        {
             ApiResponse<SummaryPaymentDto> localVarResponse = PaymentCreateWithHttpInfo(payRequestDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create payment Creates a payment, either type IN or type OUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <returns>ApiResponse of SummaryPaymentDto</returns>
        public ApiResponse<SummaryPaymentDto> PaymentCreateWithHttpInfo (PayRequestDto payRequestDto)
        {
            // verify the required parameter 'payRequestDto' is set
            if (payRequestDto == null)
                throw new ApiException(400, "Missing required parameter 'payRequestDto' when calling PaymentsApi->PaymentCreate");

            var localVarPath = "/api/v1/pay/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payRequestDto != null && payRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SummaryPaymentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummaryPaymentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SummaryPaymentDto)));
        }

        /// <summary>
        /// Create payment Creates a payment, either type IN or type OUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SummaryPaymentDto</returns>
        public async System.Threading.Tasks.Task<SummaryPaymentDto> PaymentCreateAsync (PayRequestDto payRequestDto, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SummaryPaymentDto> localVarResponse = await PaymentCreateWithHttpInfoAsync(payRequestDto, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create payment Creates a payment, either type IN or type OUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payRequestDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SummaryPaymentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SummaryPaymentDto>> PaymentCreateWithHttpInfoAsync (PayRequestDto payRequestDto, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'payRequestDto' is set
            if (payRequestDto == null)
                throw new ApiException(400, "Missing required parameter 'payRequestDto' when calling PaymentsApi->PaymentCreate");

            var localVarPath = "/api/v1/pay/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payRequestDto != null && payRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SummaryPaymentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummaryPaymentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SummaryPaymentDto)));
        }

        /// <summary>
        /// List Payments Retrieves a list of payments on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <returns>List<SummaryPaymentDto></returns>
        public List<SummaryPaymentDto> PaymentList (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string))
        {
             ApiResponse<List<SummaryPaymentDto>> localVarResponse = PaymentListWithHttpInfo(merchantId, customerReference, paymentExternalId, fromDate, toDate, offset, max, status, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Payments Retrieves a list of payments on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <returns>ApiResponse of List<SummaryPaymentDto></returns>
        public ApiResponse<List<SummaryPaymentDto>> PaymentListWithHttpInfo (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string))
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->PaymentList");

            var localVarPath = "/api/v1/pay/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (customerReference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerReference", customerReference)); // query parameter
            if (paymentExternalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentExternalId", paymentExternalId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryPaymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SummaryPaymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryPaymentDto>)));
        }

        /// <summary>
        /// List Payments Retrieves a list of payments on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<SummaryPaymentDto></returns>
        public async System.Threading.Tasks.Task<List<SummaryPaymentDto>> PaymentListAsync (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<SummaryPaymentDto>> localVarResponse = await PaymentListWithHttpInfoAsync(merchantId, customerReference, paymentExternalId, fromDate, toDate, offset, max, status, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Payments Retrieves a list of payments on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID as a UUID.</param>
        /// <param name="customerReference">The customer reference. (optional)</param>
        /// <param name="paymentExternalId">The merchant payment uuid. (optional)</param>
        /// <param name="fromDate">The start date. (optional)</param>
        /// <param name="toDate">The end date. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="order">Ordering direction. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;SummaryPaymentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SummaryPaymentDto>>> PaymentListWithHttpInfoAsync (string merchantId, string customerReference = default(string), string paymentExternalId = default(string), string fromDate = default(string), string toDate = default(string), decimal? offset = default(decimal?), decimal? max = default(decimal?), PaymentStatusDto? status = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling PaymentsApi->PaymentList");

            var localVarPath = "/api/v1/pay/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (customerReference != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerReference", customerReference)); // query parameter
            if (paymentExternalId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paymentExternalId", paymentExternalId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SummaryPaymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SummaryPaymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SummaryPaymentDto>)));
        }

        /// <summary>
        /// Validate Address Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <returns></returns>
        public void PaymentOutValidate (PayOutDetailDto payOutDetailDto)
        {
             PaymentOutValidateWithHttpInfo(payOutDetailDto);
        }

        /// <summary>
        /// Validate Address Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PaymentOutValidateWithHttpInfo (PayOutDetailDto payOutDetailDto)
        {
            // verify the required parameter 'payOutDetailDto' is set
            if (payOutDetailDto == null)
                throw new ApiException(400, "Missing required parameter 'payOutDetailDto' when calling PaymentsApi->PaymentOutValidate");

            var localVarPath = "/api/v1/pay/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payOutDetailDto != null && payOutDetailDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payOutDetailDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payOutDetailDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentOutValidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validate Address Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PaymentOutValidateAsync (PayOutDetailDto payOutDetailDto, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PaymentOutValidateWithHttpInfoAsync(payOutDetailDto, cancellationToken);

        }

        /// <summary>
        /// Validate Address Validates that a crypto address is correct.  Use this endpoint to validate that an address exists, is correctly formatted, and includes all the required data. This endpoint can help prevent your end users losing funds when submitting a payout.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="payOutDetailDto"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PaymentOutValidateWithHttpInfoAsync (PayOutDetailDto payOutDetailDto, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'payOutDetailDto' is set
            if (payOutDetailDto == null)
                throw new ApiException(400, "Missing required parameter 'payOutDetailDto' when calling PaymentsApi->PaymentOutValidate");

            var localVarPath = "/api/v1/pay/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payOutDetailDto != null && payOutDetailDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(payOutDetailDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payOutDetailDto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentOutValidate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get Payment Retrieves details of a specific payment using the UUID of the payment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <returns>SummaryPaymentDto</returns>
        public SummaryPaymentDto PaymentRead (string uuid)
        {
             ApiResponse<SummaryPaymentDto> localVarResponse = PaymentReadWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Payment Retrieves details of a specific payment using the UUID of the payment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <returns>ApiResponse of SummaryPaymentDto</returns>
        public ApiResponse<SummaryPaymentDto> PaymentReadWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->PaymentRead");

            var localVarPath = "/api/v1/pay/{uuid}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SummaryPaymentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummaryPaymentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SummaryPaymentDto)));
        }

        /// <summary>
        /// Get Payment Retrieves details of a specific payment using the UUID of the payment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SummaryPaymentDto</returns>
        public async System.Threading.Tasks.Task<SummaryPaymentDto> PaymentReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SummaryPaymentDto> localVarResponse = await PaymentReadWithHttpInfoAsync(uuid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Payment Retrieves details of a specific payment using the UUID of the payment.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The payment UUID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SummaryPaymentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SummaryPaymentDto>> PaymentReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling PaymentsApi->PaymentRead");

            var localVarPath = "/api/v1/pay/{uuid}/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SummaryPaymentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SummaryPaymentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SummaryPaymentDto)));
        }

    }
}
