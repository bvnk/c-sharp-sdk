/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWalletsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Wallet Balances
        /// </summary>
        /// <remarks>
        /// Retrieves the balances of your wallets on platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <returns>List<BalanceDto></returns>
        List<BalanceDto> WalletBalanceList (string date = default(string));

        /// <summary>
        /// List Wallet Balances
        /// </summary>
        /// <remarks>
        /// Retrieves the balances of your wallets on platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <returns>ApiResponse of List<BalanceDto></returns>
        ApiResponse<List<BalanceDto>> WalletBalanceListWithHttpInfo (string date = default(string));
        /// <summary>
        /// Create Wallet
        /// </summary>
        /// <remarks>
        /// Creates a wallet on the BVNK platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <returns>WalletDto</returns>
        WalletDto WalletCreate (WalletRequestDto walletRequestDto = default(WalletRequestDto));

        /// <summary>
        /// Create Wallet
        /// </summary>
        /// <remarks>
        /// Creates a wallet on the BVNK platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <returns>ApiResponse of WalletDto</returns>
        ApiResponse<WalletDto> WalletCreateWithHttpInfo (WalletRequestDto walletRequestDto = default(WalletRequestDto));
        /// <summary>
        /// List Wallets
        /// </summary>
        /// <remarks>
        /// Retrieves a list of wallets on your account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <returns>List<WalletDto></returns>
        List<WalletDto> WalletList (int? offset = default(int?), int? max = default(int?));

        /// <summary>
        /// List Wallets
        /// </summary>
        /// <remarks>
        /// Retrieves a list of wallets on your account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <returns>ApiResponse of List<WalletDto></returns>
        ApiResponse<List<WalletDto>> WalletListWithHttpInfo (int? offset = default(int?), int? max = default(int?));
        /// <summary>
        /// Get Wallet
        /// </summary>
        /// <remarks>
        /// Retrieves a specific wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <returns>WalletDto</returns>
        WalletDto WalletRead (long id);

        /// <summary>
        /// Get Wallet
        /// </summary>
        /// <remarks>
        /// Retrieves a specific wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <returns>ApiResponse of WalletDto</returns>
        ApiResponse<WalletDto> WalletReadWithHttpInfo (long id);
        /// <summary>
        /// Transactions Report
        /// </summary>
        /// <remarks>
        /// Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <returns>List<TransactionReportDto></returns>
        List<TransactionReportDto> WalletTransactionReport (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string));

        /// <summary>
        /// Transactions Report
        /// </summary>
        /// <remarks>
        /// Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <returns>ApiResponse of List<TransactionReportDto></returns>
        ApiResponse<List<TransactionReportDto>> WalletTransactionReportWithHttpInfo (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Wallet Balances
        /// </summary>
        /// <remarks>
        /// Retrieves the balances of your wallets on platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<BalanceDto></returns>
        System.Threading.Tasks.Task<List<BalanceDto>> WalletBalanceListAsync (string date = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Wallet Balances
        /// </summary>
        /// <remarks>
        /// Retrieves the balances of your wallets on platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;BalanceDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BalanceDto>>> WalletBalanceListWithHttpInfoAsync (string date = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Wallet
        /// </summary>
        /// <remarks>
        /// Creates a wallet on the BVNK platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WalletDto</returns>
        System.Threading.Tasks.Task<WalletDto> WalletCreateAsync (WalletRequestDto walletRequestDto = default(WalletRequestDto), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Wallet
        /// </summary>
        /// <remarks>
        /// Creates a wallet on the BVNK platform.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletDto>> WalletCreateWithHttpInfoAsync (WalletRequestDto walletRequestDto = default(WalletRequestDto), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Wallets
        /// </summary>
        /// <remarks>
        /// Retrieves a list of wallets on your account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<WalletDto></returns>
        System.Threading.Tasks.Task<List<WalletDto>> WalletListAsync (int? offset = default(int?), int? max = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Wallets
        /// </summary>
        /// <remarks>
        /// Retrieves a list of wallets on your account.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;WalletDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WalletDto>>> WalletListWithHttpInfoAsync (int? offset = default(int?), int? max = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Wallet
        /// </summary>
        /// <remarks>
        /// Retrieves a specific wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WalletDto</returns>
        System.Threading.Tasks.Task<WalletDto> WalletReadAsync (long id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Wallet
        /// </summary>
        /// <remarks>
        /// Retrieves a specific wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletDto>> WalletReadWithHttpInfoAsync (long id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Transactions Report
        /// </summary>
        /// <remarks>
        /// Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionReportDto></returns>
        System.Threading.Tasks.Task<List<TransactionReportDto>> WalletTransactionReportAsync (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Transactions Report
        /// </summary>
        /// <remarks>
        /// Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionReportDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionReportDto>>> WalletTransactionReportWithHttpInfoAsync (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WalletsApi : IWalletsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WalletsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class
        /// </summary>
        /// <returns></returns>
        public WalletsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WalletsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Wallet Balances Retrieves the balances of your wallets on platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <returns>List<BalanceDto></returns>
        public List<BalanceDto> WalletBalanceList (string date = default(string))
        {
             ApiResponse<List<BalanceDto>> localVarResponse = WalletBalanceListWithHttpInfo(date);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Wallet Balances Retrieves the balances of your wallets on platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <returns>ApiResponse of List<BalanceDto></returns>
        public ApiResponse<List<BalanceDto>> WalletBalanceListWithHttpInfo (string date = default(string))
        {

            var localVarPath = "/api/wallet/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalanceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BalanceDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BalanceDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BalanceDto>)));
        }

        /// <summary>
        /// List Wallet Balances Retrieves the balances of your wallets on platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<BalanceDto></returns>
        public async System.Threading.Tasks.Task<List<BalanceDto>> WalletBalanceListAsync (string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<BalanceDto>> localVarResponse = await WalletBalanceListWithHttpInfoAsync(date, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Wallet Balances Retrieves the balances of your wallets on platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date at to retrieve balances. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;BalanceDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BalanceDto>>> WalletBalanceListWithHttpInfoAsync (string date = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/wallet/balances";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date", date)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalanceList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BalanceDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<BalanceDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BalanceDto>)));
        }

        /// <summary>
        /// Create Wallet Creates a wallet on the BVNK platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <returns>WalletDto</returns>
        public WalletDto WalletCreate (WalletRequestDto walletRequestDto = default(WalletRequestDto))
        {
             ApiResponse<WalletDto> localVarResponse = WalletCreateWithHttpInfo(walletRequestDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Wallet Creates a wallet on the BVNK platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <returns>ApiResponse of WalletDto</returns>
        public ApiResponse<WalletDto> WalletCreateWithHttpInfo (WalletRequestDto walletRequestDto = default(WalletRequestDto))
        {

            var localVarPath = "/api/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletRequestDto != null && walletRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletDto)));
        }

        /// <summary>
        /// Create Wallet Creates a wallet on the BVNK platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WalletDto</returns>
        public async System.Threading.Tasks.Task<WalletDto> WalletCreateAsync (WalletRequestDto walletRequestDto = default(WalletRequestDto), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WalletDto> localVarResponse = await WalletCreateWithHttpInfoAsync(walletRequestDto, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Wallet Creates a wallet on the BVNK platform.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletDto>> WalletCreateWithHttpInfoAsync (WalletRequestDto walletRequestDto = default(WalletRequestDto), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletRequestDto != null && walletRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(walletRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletDto)));
        }

        /// <summary>
        /// List Wallets Retrieves a list of wallets on your account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <returns>List<WalletDto></returns>
        public List<WalletDto> WalletList (int? offset = default(int?), int? max = default(int?))
        {
             ApiResponse<List<WalletDto>> localVarResponse = WalletListWithHttpInfo(offset, max);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Wallets Retrieves a list of wallets on your account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <returns>ApiResponse of List<WalletDto></returns>
        public ApiResponse<List<WalletDto>> WalletListWithHttpInfo (int? offset = default(int?), int? max = default(int?))
        {

            var localVarPath = "/api/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WalletDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<WalletDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WalletDto>)));
        }

        /// <summary>
        /// List Wallets Retrieves a list of wallets on your account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<WalletDto></returns>
        public async System.Threading.Tasks.Task<List<WalletDto>> WalletListAsync (int? offset = default(int?), int? max = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<WalletDto>> localVarResponse = await WalletListWithHttpInfoAsync(offset, max, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Wallets Retrieves a list of wallets on your account.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;WalletDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WalletDto>>> WalletListWithHttpInfoAsync (int? offset = default(int?), int? max = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WalletDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<WalletDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WalletDto>)));
        }

        /// <summary>
        /// Get Wallet Retrieves a specific wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <returns>WalletDto</returns>
        public WalletDto WalletRead (long id)
        {
             ApiResponse<WalletDto> localVarResponse = WalletReadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Wallet Retrieves a specific wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <returns>ApiResponse of WalletDto</returns>
        public ApiResponse<WalletDto> WalletReadWithHttpInfo (long id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->WalletRead");

            var localVarPath = "/api/wallet/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletDto)));
        }

        /// <summary>
        /// Get Wallet Retrieves a specific wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of WalletDto</returns>
        public async System.Threading.Tasks.Task<WalletDto> WalletReadAsync (long id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<WalletDto> localVarResponse = await WalletReadWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Wallet Retrieves a specific wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the wallet that you want to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (WalletDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletDto>> WalletReadWithHttpInfoAsync (long id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WalletsApi->WalletRead");

            var localVarPath = "/api/wallet/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (WalletDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletDto)));
        }

        /// <summary>
        /// Transactions Report Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <returns>List<TransactionReportDto></returns>
        public List<TransactionReportDto> WalletTransactionReport (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string))
        {
             ApiResponse<List<TransactionReportDto>> localVarResponse = WalletTransactionReportWithHttpInfo(walletId, fromDate, toDate, format, transactionType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transactions Report Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <returns>ApiResponse of List<TransactionReportDto></returns>
        public ApiResponse<List<TransactionReportDto>> WalletTransactionReportWithHttpInfo (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string))
        {

            var localVarPath = "/api/transaction/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (transactionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionType", transactionType)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactionReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionReportDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionReportDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionReportDto>)));
        }

        /// <summary>
        /// Transactions Report Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<TransactionReportDto></returns>
        public async System.Threading.Tasks.Task<List<TransactionReportDto>> WalletTransactionReportAsync (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<TransactionReportDto>> localVarResponse = await WalletTransactionReportWithHttpInfoAsync(walletId, fromDate, toDate, format, transactionType, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transactions Report Report all transactions from wallet in specified format. Report will be generated and sent to main account email in the specified format.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId">Date at to retrieve balances. (optional, default to 255861)</param>
        /// <param name="fromDate">Export range from date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2022-09-17&quot;)</param>
        /// <param name="toDate">Export range to date in format &#39;YYYY-MM-dd&#39;. (optional, default to &quot;2023-03-17&quot;)</param>
        /// <param name="format">&#39;json&#39; - json format, &#39;csv&#39; - csv format (optional, default to &quot;csv&quot;)</param>
        /// <param name="transactionType">Transaction type code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;TransactionReportDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionReportDto>>> WalletTransactionReportWithHttpInfoAsync (long? walletId = default(long?), string fromDate = default(string), string toDate = default(string), string format = default(string), string transactionType = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/transaction/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "walletId", walletId)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (format != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter
            if (transactionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionType", transactionType)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactionReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionReportDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<TransactionReportDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionReportDto>)));
        }

    }
}
