/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrenciesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Crypto Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <returns>List<CurrencyDto></returns>
        List<CurrencyDto> ListCurrenciesCrypto (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?));

        /// <summary>
        /// List Crypto Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <returns>ApiResponse of List<CurrencyDto></returns>
        ApiResponse<List<CurrencyDto>> ListCurrenciesCryptoWithHttpInfo (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?));
        /// <summary>
        /// List Wallet Currencies
        /// </summary>
        /// <remarks>
        /// These are the currencies that can be used to create a new wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>List<CurrencyDto></returns>
        List<CurrencyDto> ListCurrenciesDeposit (decimal? offset = default(decimal?), decimal? max = default(decimal?));

        /// <summary>
        /// List Wallet Currencies
        /// </summary>
        /// <remarks>
        /// These are the currencies that can be used to create a new wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>ApiResponse of List<CurrencyDto></returns>
        ApiResponse<List<CurrencyDto>> ListCurrenciesDepositWithHttpInfo (decimal? offset = default(decimal?), decimal? max = default(decimal?));
        /// <summary>
        /// List Fiat Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>List<CurrencyFiatDto></returns>
        List<CurrencyFiatDto> ListCurrenciesFiat (decimal? offset = default(decimal?), decimal? max = default(decimal?));

        /// <summary>
        /// List Fiat Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>ApiResponse of List<CurrencyFiatDto></returns>
        ApiResponse<List<CurrencyFiatDto>> ListCurrenciesFiatWithHttpInfo (decimal? offset = default(decimal?), decimal? max = default(decimal?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List Crypto Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CurrencyDto></returns>
        System.Threading.Tasks.Task<List<CurrencyDto>> ListCurrenciesCryptoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Crypto Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencyDto>>> ListCurrenciesCryptoWithHttpInfoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Wallet Currencies
        /// </summary>
        /// <remarks>
        /// These are the currencies that can be used to create a new wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CurrencyDto></returns>
        System.Threading.Tasks.Task<List<CurrencyDto>> ListCurrenciesDepositAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Wallet Currencies
        /// </summary>
        /// <remarks>
        /// These are the currencies that can be used to create a new wallet.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencyDto>>> ListCurrenciesDepositWithHttpInfoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Fiat Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CurrencyFiatDto></returns>
        System.Threading.Tasks.Task<List<CurrencyFiatDto>> ListCurrenciesFiatAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Fiat Currencies
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyFiatDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CurrencyFiatDto>>> ListCurrenciesFiatWithHttpInfoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CurrenciesApi : ICurrenciesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// </summary>
        /// <returns></returns>
        public CurrenciesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrenciesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List Crypto Currencies Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <returns>List<CurrencyDto></returns>
        public List<CurrencyDto> ListCurrenciesCrypto (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?))
        {
             ApiResponse<List<CurrencyDto>> localVarResponse = ListCurrenciesCryptoWithHttpInfo(offset, max, allowDeposits);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Crypto Currencies Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <returns>ApiResponse of List<CurrencyDto></returns>
        public ApiResponse<List<CurrencyDto>> ListCurrenciesCryptoWithHttpInfo (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?))
        {

            var localVarPath = "/api/currency/crypto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (allowDeposits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowDeposits", allowDeposits)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCurrenciesCrypto", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyDto>)));
        }

        /// <summary>
        /// List Crypto Currencies Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CurrencyDto></returns>
        public async System.Threading.Tasks.Task<List<CurrencyDto>> ListCurrenciesCryptoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CurrencyDto>> localVarResponse = await ListCurrenciesCryptoWithHttpInfoAsync(offset, max, allowDeposits, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Crypto Currencies Retrieves a list of all cryptocurrencies available on the BVNK platform. This list represents cryptocurrencies that end users can select whilst making a payment.  For sandbox, only Ethereum (ETH) is fully functional.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="allowDeposits">Only list currencies that allow deposits. (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencyDto>>> ListCurrenciesCryptoWithHttpInfoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), bool? allowDeposits = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/currency/crypto";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (allowDeposits != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowDeposits", allowDeposits)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCurrenciesCrypto", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyDto>)));
        }

        /// <summary>
        /// List Wallet Currencies These are the currencies that can be used to create a new wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>List<CurrencyDto></returns>
        public List<CurrencyDto> ListCurrenciesDeposit (decimal? offset = default(decimal?), decimal? max = default(decimal?))
        {
             ApiResponse<List<CurrencyDto>> localVarResponse = ListCurrenciesDepositWithHttpInfo(offset, max);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Wallet Currencies These are the currencies that can be used to create a new wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>ApiResponse of List<CurrencyDto></returns>
        public ApiResponse<List<CurrencyDto>> ListCurrenciesDepositWithHttpInfo (decimal? offset = default(decimal?), decimal? max = default(decimal?))
        {

            var localVarPath = "/api/currency/deposit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCurrenciesDeposit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyDto>)));
        }

        /// <summary>
        /// List Wallet Currencies These are the currencies that can be used to create a new wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CurrencyDto></returns>
        public async System.Threading.Tasks.Task<List<CurrencyDto>> ListCurrenciesDepositAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CurrencyDto>> localVarResponse = await ListCurrenciesDepositWithHttpInfoAsync(offset, max, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Wallet Currencies These are the currencies that can be used to create a new wallet.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencyDto>>> ListCurrenciesDepositWithHttpInfoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/currency/deposit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCurrenciesDeposit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyDto>)));
        }

        /// <summary>
        /// List Fiat Currencies Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>List<CurrencyFiatDto></returns>
        public List<CurrencyFiatDto> ListCurrenciesFiat (decimal? offset = default(decimal?), decimal? max = default(decimal?))
        {
             ApiResponse<List<CurrencyFiatDto>> localVarResponse = ListCurrenciesFiatWithHttpInfo(offset, max);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Fiat Currencies Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <returns>ApiResponse of List<CurrencyFiatDto></returns>
        public ApiResponse<List<CurrencyFiatDto>> ListCurrenciesFiatWithHttpInfo (decimal? offset = default(decimal?), decimal? max = default(decimal?))
        {

            var localVarPath = "/api/currency/fiat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCurrenciesFiat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyFiatDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyFiatDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyFiatDto>)));
        }

        /// <summary>
        /// List Fiat Currencies Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CurrencyFiatDto></returns>
        public async System.Threading.Tasks.Task<List<CurrencyFiatDto>> ListCurrenciesFiatAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CurrencyFiatDto>> localVarResponse = await ListCurrenciesFiatWithHttpInfoAsync(offset, max, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Fiat Currencies Retrieves a list of all display fiat currencies available on BVNK's Crypto Payments API. This list refers to currencies merchants can display on a payment page to an end user. It does not represent the list of currencies that can be held on the platform in wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Where to start fetching records. (optional, default to 0M)</param>
        /// <param name="max">Maximum number of items in response. (optional, default to 200M)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CurrencyFiatDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CurrencyFiatDto>>> ListCurrenciesFiatWithHttpInfoAsync (decimal? offset = default(decimal?), decimal? max = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/currency/fiat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListCurrenciesFiat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CurrencyFiatDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CurrencyFiatDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CurrencyFiatDto>)));
        }

    }
}
