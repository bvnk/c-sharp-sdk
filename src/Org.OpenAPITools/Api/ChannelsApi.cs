/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Channel
        /// </summary>
        /// <remarks>
        /// Creates a channel that your end users can openly send payments to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <returns>MerchantChannelDto</returns>
        MerchantChannelDto ChannelCreate (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto));

        /// <summary>
        /// Create Channel
        /// </summary>
        /// <remarks>
        /// Creates a channel that your end users can openly send payments to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <returns>ApiResponse of MerchantChannelDto</returns>
        ApiResponse<MerchantChannelDto> ChannelCreateWithHttpInfo (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto));
        /// <summary>
        /// List Channels
        /// </summary>
        /// <remarks>
        /// Retrieves all channels related to a Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <returns>List<MerchantChannelDto></returns>
        List<MerchantChannelDto> ChannelList (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string));

        /// <summary>
        /// List Channels
        /// </summary>
        /// <remarks>
        /// Retrieves all channels related to a Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <returns>ApiResponse of List<MerchantChannelDto></returns>
        ApiResponse<List<MerchantChannelDto>> ChannelListWithHttpInfo (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string));
        /// <summary>
        /// List Channel Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <returns>List<MerchantChannelPaymentDto></returns>
        List<MerchantChannelPaymentDto> ChannelPaymentList (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string));

        /// <summary>
        /// List Channel Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <returns>ApiResponse of List<MerchantChannelPaymentDto></returns>
        ApiResponse<List<MerchantChannelPaymentDto>> ChannelPaymentListWithHttpInfo (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string));
        /// <summary>
        /// Get Channel Payment
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payment made into a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <returns>MerchantChannelPaymentDto</returns>
        MerchantChannelPaymentDto ChannelPaymentRead (string uuid);

        /// <summary>
        /// Get Channel Payment
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payment made into a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <returns>ApiResponse of MerchantChannelPaymentDto</returns>
        ApiResponse<MerchantChannelPaymentDto> ChannelPaymentReadWithHttpInfo (string uuid);
        /// <summary>
        /// Get Channel
        /// </summary>
        /// <remarks>
        /// Retrieves a specific channel by UUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <returns>MerchantChannelDto</returns>
        MerchantChannelDto ChannelRead (string uuid);

        /// <summary>
        /// Get Channel
        /// </summary>
        /// <remarks>
        /// Retrieves a specific channel by UUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <returns>ApiResponse of MerchantChannelDto</returns>
        ApiResponse<MerchantChannelDto> ChannelReadWithHttpInfo (string uuid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Channel
        /// </summary>
        /// <remarks>
        /// Creates a channel that your end users can openly send payments to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerchantChannelDto</returns>
        System.Threading.Tasks.Task<MerchantChannelDto> ChannelCreateAsync (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Channel
        /// </summary>
        /// <remarks>
        /// Creates a channel that your end users can openly send payments to.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerchantChannelDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantChannelDto>> ChannelCreateWithHttpInfoAsync (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Channels
        /// </summary>
        /// <remarks>
        /// Retrieves all channels related to a Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MerchantChannelDto></returns>
        System.Threading.Tasks.Task<List<MerchantChannelDto>> ChannelListAsync (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Channels
        /// </summary>
        /// <remarks>
        /// Retrieves all channels related to a Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MerchantChannelDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MerchantChannelDto>>> ChannelListWithHttpInfoAsync (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Channel Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MerchantChannelPaymentDto></returns>
        System.Threading.Tasks.Task<List<MerchantChannelPaymentDto>> ChannelPaymentListAsync (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Channel Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MerchantChannelPaymentDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MerchantChannelPaymentDto>>> ChannelPaymentListWithHttpInfoAsync (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Channel Payment
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payment made into a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerchantChannelPaymentDto</returns>
        System.Threading.Tasks.Task<MerchantChannelPaymentDto> ChannelPaymentReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Channel Payment
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payment made into a channel.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerchantChannelPaymentDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantChannelPaymentDto>> ChannelPaymentReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Channel
        /// </summary>
        /// <remarks>
        /// Retrieves a specific channel by UUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerchantChannelDto</returns>
        System.Threading.Tasks.Task<MerchantChannelDto> ChannelReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Channel
        /// </summary>
        /// <remarks>
        /// Retrieves a specific channel by UUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerchantChannelDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantChannelDto>> ChannelReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelsApi : IChannelsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ChannelsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Channel Creates a channel that your end users can openly send payments to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <returns>MerchantChannelDto</returns>
        public MerchantChannelDto ChannelCreate (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto))
        {
             ApiResponse<MerchantChannelDto> localVarResponse = ChannelCreateWithHttpInfo(merchantChannelRequestDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Channel Creates a channel that your end users can openly send payments to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <returns>ApiResponse of MerchantChannelDto</returns>
        public ApiResponse<MerchantChannelDto> ChannelCreateWithHttpInfo (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto))
        {

            var localVarPath = "/api/v2/channel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantChannelRequestDto != null && merchantChannelRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(merchantChannelRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = merchantChannelRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantChannelDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantChannelDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantChannelDto)));
        }

        /// <summary>
        /// Create Channel Creates a channel that your end users can openly send payments to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerchantChannelDto</returns>
        public async System.Threading.Tasks.Task<MerchantChannelDto> ChannelCreateAsync (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerchantChannelDto> localVarResponse = await ChannelCreateWithHttpInfoAsync(merchantChannelRequestDto, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Channel Creates a channel that your end users can openly send payments to.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantChannelRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerchantChannelDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantChannelDto>> ChannelCreateWithHttpInfoAsync (MerchantChannelRequestDto merchantChannelRequestDto = default(MerchantChannelRequestDto), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v2/channel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantChannelRequestDto != null && merchantChannelRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(merchantChannelRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = merchantChannelRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantChannelDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantChannelDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantChannelDto)));
        }

        /// <summary>
        /// List Channels Retrieves all channels related to a Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <returns>List<MerchantChannelDto></returns>
        public List<MerchantChannelDto> ChannelList (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string))
        {
             ApiResponse<List<MerchantChannelDto>> localVarResponse = ChannelListWithHttpInfo(merchantId, offset, max, sort, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Channels Retrieves all channels related to a Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <returns>ApiResponse of List<MerchantChannelDto></returns>
        public ApiResponse<List<MerchantChannelDto>> ChannelListWithHttpInfo (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string))
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling ChannelsApi->ChannelList");

            var localVarPath = "/api/v2/channel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MerchantChannelDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MerchantChannelDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MerchantChannelDto>)));
        }

        /// <summary>
        /// List Channels Retrieves all channels related to a Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MerchantChannelDto></returns>
        public async System.Threading.Tasks.Task<List<MerchantChannelDto>> ChannelListAsync (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MerchantChannelDto>> localVarResponse = await ChannelListWithHttpInfoAsync(merchantId, offset, max, sort, order, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Channels Retrieves all channels related to a Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The merchant ID that the channels belong to</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="sort">The attribute used to sort the data (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MerchantChannelDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MerchantChannelDto>>> ChannelListWithHttpInfoAsync (string merchantId, string offset = default(string), string max = default(string), PaymentStatusDto? sort = default(PaymentStatusDto?), string order = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling ChannelsApi->ChannelList");

            var localVarPath = "/api/v2/channel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MerchantChannelDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MerchantChannelDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MerchantChannelDto>)));
        }

        /// <summary>
        /// List Channel Payments Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <returns>List<MerchantChannelPaymentDto></returns>
        public List<MerchantChannelPaymentDto> ChannelPaymentList (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string))
        {
             ApiResponse<List<MerchantChannelPaymentDto>> localVarResponse = ChannelPaymentListWithHttpInfo(merchantId, status, fromDate, toDate, offset, max, order, q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Channel Payments Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <returns>ApiResponse of List<MerchantChannelPaymentDto></returns>
        public ApiResponse<List<MerchantChannelPaymentDto>> ChannelPaymentListWithHttpInfo (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string))
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling ChannelsApi->ChannelPaymentList");

            var localVarPath = "/api/v2/channel/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelPaymentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MerchantChannelPaymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MerchantChannelPaymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MerchantChannelPaymentDto>)));
        }

        /// <summary>
        /// List Channel Payments Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<MerchantChannelPaymentDto></returns>
        public async System.Threading.Tasks.Task<List<MerchantChannelPaymentDto>> ChannelPaymentListAsync (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<MerchantChannelPaymentDto>> localVarResponse = await ChannelPaymentListWithHttpInfoAsync(merchantId, status, fromDate, toDate, offset, max, order, q, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Channel Payments Retrieves a list of payments to a channel on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">The Merchant ID</param>
        /// <param name="status"> (optional)</param>
        /// <param name="fromDate">From which date to start searching. (optional)</param>
        /// <param name="toDate">At which date to stop searching. (optional)</param>
        /// <param name="offset">Where to start fetching records. (optional)</param>
        /// <param name="max">Maximum number of items in response. (optional)</param>
        /// <param name="order">Ordering direction (optional)</param>
        /// <param name="q">Can be UUID of the payment, reference, channel UUID, transaction hash, or wallet code. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;MerchantChannelPaymentDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MerchantChannelPaymentDto>>> ChannelPaymentListWithHttpInfoAsync (string merchantId, string status = default(string), string fromDate = default(string), string toDate = default(string), string offset = default(string), string max = default(string), string order = default(string), string q = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling ChannelsApi->ChannelPaymentList");

            var localVarPath = "/api/v2/channel/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "merchantId", merchantId)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (fromDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromDate", fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toDate", toDate)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (max != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max", max)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelPaymentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MerchantChannelPaymentDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MerchantChannelPaymentDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MerchantChannelPaymentDto>)));
        }

        /// <summary>
        /// Get Channel Payment Retrieves a specific payment made into a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <returns>MerchantChannelPaymentDto</returns>
        public MerchantChannelPaymentDto ChannelPaymentRead (string uuid)
        {
             ApiResponse<MerchantChannelPaymentDto> localVarResponse = ChannelPaymentReadWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Channel Payment Retrieves a specific payment made into a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <returns>ApiResponse of MerchantChannelPaymentDto</returns>
        public ApiResponse<MerchantChannelPaymentDto> ChannelPaymentReadWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling ChannelsApi->ChannelPaymentRead");

            var localVarPath = "/api/v2/channel/payment/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelPaymentRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantChannelPaymentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantChannelPaymentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantChannelPaymentDto)));
        }

        /// <summary>
        /// Get Channel Payment Retrieves a specific payment made into a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerchantChannelPaymentDto</returns>
        public async System.Threading.Tasks.Task<MerchantChannelPaymentDto> ChannelPaymentReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerchantChannelPaymentDto> localVarResponse = await ChannelPaymentReadWithHttpInfoAsync(uuid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Channel Payment Retrieves a specific payment made into a channel.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the payment you are querying.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerchantChannelPaymentDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantChannelPaymentDto>> ChannelPaymentReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling ChannelsApi->ChannelPaymentRead");

            var localVarPath = "/api/v2/channel/payment/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelPaymentRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantChannelPaymentDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantChannelPaymentDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantChannelPaymentDto)));
        }

        /// <summary>
        /// Get Channel Retrieves a specific channel by UUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <returns>MerchantChannelDto</returns>
        public MerchantChannelDto ChannelRead (string uuid)
        {
             ApiResponse<MerchantChannelDto> localVarResponse = ChannelReadWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Channel Retrieves a specific channel by UUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <returns>ApiResponse of MerchantChannelDto</returns>
        public ApiResponse<MerchantChannelDto> ChannelReadWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling ChannelsApi->ChannelRead");

            var localVarPath = "/api/v2/channel/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantChannelDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantChannelDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantChannelDto)));
        }

        /// <summary>
        /// Get Channel Retrieves a specific channel by UUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of MerchantChannelDto</returns>
        public async System.Threading.Tasks.Task<MerchantChannelDto> ChannelReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<MerchantChannelDto> localVarResponse = await ChannelReadWithHttpInfoAsync(uuid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Channel Retrieves a specific channel by UUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The UUID of the channel you are querying</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (MerchantChannelDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantChannelDto>> ChannelReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling ChannelsApi->ChannelRead");

            var localVarPath = "/api/v2/channel/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChannelRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantChannelDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MerchantChannelDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantChannelDto)));
        }

    }
}
