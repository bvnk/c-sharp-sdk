/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradingAndConversionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept Quote
        /// </summary>
        /// <remarks>
        /// Executes a quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <returns>AcceptedQuoteDto</returns>
        AcceptedQuoteDto QuoteAccept (string uuid);

        /// <summary>
        /// Accept Quote
        /// </summary>
        /// <remarks>
        /// Executes a quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <returns>ApiResponse of AcceptedQuoteDto</returns>
        ApiResponse<AcceptedQuoteDto> QuoteAcceptWithHttpInfo (string uuid);
        /// <summary>
        /// Create Quote
        /// </summary>
        /// <remarks>
        /// Creates a quote to convert between wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <returns>QuoteDto</returns>
        QuoteDto QuoteCreate (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto));

        /// <summary>
        /// Create Quote
        /// </summary>
        /// <remarks>
        /// Creates a quote to convert between wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <returns>ApiResponse of QuoteDto</returns>
        ApiResponse<QuoteDto> QuoteCreateWithHttpInfo (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto));
        /// <summary>
        /// List Quotes
        /// </summary>
        /// <remarks>
        /// Retrieves all quotes on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <returns>List<QuoteDto></returns>
        List<QuoteDto> QuoteList (string merchantId);

        /// <summary>
        /// List Quotes
        /// </summary>
        /// <remarks>
        /// Retrieves all quotes on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <returns>ApiResponse of List<QuoteDto></returns>
        ApiResponse<List<QuoteDto>> QuoteListWithHttpInfo (string merchantId);
        /// <summary>
        /// Get Quote
        /// </summary>
        /// <remarks>
        /// Retrieves a specific quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <returns>QuoteDto</returns>
        QuoteDto QuoteRead (string uuid);

        /// <summary>
        /// Get Quote
        /// </summary>
        /// <remarks>
        /// Retrieves a specific quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <returns>ApiResponse of QuoteDto</returns>
        ApiResponse<QuoteDto> QuoteReadWithHttpInfo (string uuid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept Quote
        /// </summary>
        /// <remarks>
        /// Executes a quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AcceptedQuoteDto</returns>
        System.Threading.Tasks.Task<AcceptedQuoteDto> QuoteAcceptAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Accept Quote
        /// </summary>
        /// <remarks>
        /// Executes a quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AcceptedQuoteDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptedQuoteDto>> QuoteAcceptWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create Quote
        /// </summary>
        /// <remarks>
        /// Creates a quote to convert between wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QuoteDto</returns>
        System.Threading.Tasks.Task<QuoteDto> QuoteCreateAsync (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Quote
        /// </summary>
        /// <remarks>
        /// Creates a quote to convert between wallets.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QuoteDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuoteDto>> QuoteCreateWithHttpInfoAsync (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Quotes
        /// </summary>
        /// <remarks>
        /// Retrieves all quotes on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<QuoteDto></returns>
        System.Threading.Tasks.Task<List<QuoteDto>> QuoteListAsync (string merchantId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Quotes
        /// </summary>
        /// <remarks>
        /// Retrieves all quotes on a specific Merchant ID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;QuoteDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuoteDto>>> QuoteListWithHttpInfoAsync (string merchantId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get Quote
        /// </summary>
        /// <remarks>
        /// Retrieves a specific quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QuoteDto</returns>
        System.Threading.Tasks.Task<QuoteDto> QuoteReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Quote
        /// </summary>
        /// <remarks>
        /// Retrieves a specific quote.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QuoteDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuoteDto>> QuoteReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradingAndConversionsApi : ITradingAndConversionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingAndConversionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradingAndConversionsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingAndConversionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TradingAndConversionsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingAndConversionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradingAndConversionsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept Quote Executes a quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <returns>AcceptedQuoteDto</returns>
        public AcceptedQuoteDto QuoteAccept (string uuid)
        {
             ApiResponse<AcceptedQuoteDto> localVarResponse = QuoteAcceptWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept Quote Executes a quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <returns>ApiResponse of AcceptedQuoteDto</returns>
        public ApiResponse<AcceptedQuoteDto> QuoteAcceptWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TradingAndConversionsApi->QuoteAccept");

            var localVarPath = "/api/v1/quote/accept/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedQuoteDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AcceptedQuoteDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedQuoteDto)));
        }

        /// <summary>
        /// Accept Quote Executes a quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of AcceptedQuoteDto</returns>
        public async System.Threading.Tasks.Task<AcceptedQuoteDto> QuoteAcceptAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<AcceptedQuoteDto> localVarResponse = await QuoteAcceptWithHttpInfoAsync(uuid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept Quote Executes a quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">The quote UUID you are accepting.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (AcceptedQuoteDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcceptedQuoteDto>> QuoteAcceptWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TradingAndConversionsApi->QuoteAccept");

            var localVarPath = "/api/v1/quote/accept/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteAccept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcceptedQuoteDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AcceptedQuoteDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcceptedQuoteDto)));
        }

        /// <summary>
        /// Create Quote Creates a quote to convert between wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <returns>QuoteDto</returns>
        public QuoteDto QuoteCreate (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto))
        {
             ApiResponse<QuoteDto> localVarResponse = QuoteCreateWithHttpInfo(estimate, quoteRequestDto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Quote Creates a quote to convert between wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <returns>ApiResponse of QuoteDto</returns>
        public ApiResponse<QuoteDto> QuoteCreateWithHttpInfo (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto))
        {

            var localVarPath = "/api/v1/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (estimate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "estimate", estimate)); // query parameter
            if (quoteRequestDto != null && quoteRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(quoteRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = quoteRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuoteDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuoteDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuoteDto)));
        }

        /// <summary>
        /// Create Quote Creates a quote to convert between wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QuoteDto</returns>
        public async System.Threading.Tasks.Task<QuoteDto> QuoteCreateAsync (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<QuoteDto> localVarResponse = await QuoteCreateWithHttpInfoAsync(estimate, quoteRequestDto, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Quote Creates a quote to convert between wallets.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="estimate">Create estimate quote (optional, default to false)</param>
        /// <param name="quoteRequestDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QuoteDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuoteDto>> QuoteCreateWithHttpInfoAsync (bool? estimate = default(bool?), QuoteRequestDto quoteRequestDto = default(QuoteRequestDto), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/api/v1/quote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (estimate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "estimate", estimate)); // query parameter
            if (quoteRequestDto != null && quoteRequestDto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(quoteRequestDto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = quoteRequestDto; // byte array
            }

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuoteDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuoteDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuoteDto)));
        }

        /// <summary>
        /// List Quotes Retrieves all quotes on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <returns>List<QuoteDto></returns>
        public List<QuoteDto> QuoteList (string merchantId)
        {
             ApiResponse<List<QuoteDto>> localVarResponse = QuoteListWithHttpInfo(merchantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Quotes Retrieves all quotes on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <returns>ApiResponse of List<QuoteDto></returns>
        public ApiResponse<List<QuoteDto>> QuoteListWithHttpInfo (string merchantId)
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling TradingAndConversionsApi->QuoteList");

            var localVarPath = "/api/v1/quote/{merchantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuoteDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QuoteDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuoteDto>)));
        }

        /// <summary>
        /// List Quotes Retrieves all quotes on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<QuoteDto></returns>
        public async System.Threading.Tasks.Task<List<QuoteDto>> QuoteListAsync (string merchantId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<QuoteDto>> localVarResponse = await QuoteListWithHttpInfoAsync(merchantId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Quotes Retrieves all quotes on a specific Merchant ID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantId">Merchant ID you are retrieving quotes from.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;QuoteDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuoteDto>>> QuoteListWithHttpInfoAsync (string merchantId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling TradingAndConversionsApi->QuoteList");

            var localVarPath = "/api/v1/quote/{merchantId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (merchantId != null) localVarPathParams.Add("merchantId", this.Configuration.ApiClient.ParameterToString(merchantId)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuoteDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<QuoteDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuoteDto>)));
        }

        /// <summary>
        /// Get Quote Retrieves a specific quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <returns>QuoteDto</returns>
        public QuoteDto QuoteRead (string uuid)
        {
             ApiResponse<QuoteDto> localVarResponse = QuoteReadWithHttpInfo(uuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Quote Retrieves a specific quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <returns>ApiResponse of QuoteDto</returns>
        public ApiResponse<QuoteDto> QuoteReadWithHttpInfo (string uuid)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TradingAndConversionsApi->QuoteRead");

            var localVarPath = "/api/v1/quote/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuoteDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuoteDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuoteDto)));
        }

        /// <summary>
        /// Get Quote Retrieves a specific quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of QuoteDto</returns>
        public async System.Threading.Tasks.Task<QuoteDto> QuoteReadAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<QuoteDto> localVarResponse = await QuoteReadWithHttpInfoAsync(uuid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Quote Retrieves a specific quote.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid">UUID of the quote you are retrieving.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (QuoteDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuoteDto>> QuoteReadWithHttpInfoAsync (string uuid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
                throw new ApiException(400, "Missing required parameter 'uuid' when calling TradingAndConversionsApi->QuoteRead");

            var localVarPath = "/api/v1/quote/{uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uuid != null) localVarPathParams.Add("uuid", this.Configuration.ApiClient.ParameterToString(uuid)); // path parameter

            // authentication (Hawk) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuoteRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuoteDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QuoteDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuoteDto)));
        }

    }
}
