/*
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing TradingAndConversionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TradingAndConversionsApiTests
    {
        private TradingAndConversionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TradingAndConversionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TradingAndConversionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' TradingAndConversionsApi
            //Assert.IsInstanceOf(typeof(TradingAndConversionsApi), instance);
        }

        
        /// <summary>
        /// Test QuoteAccept
        /// </summary>
        [Test]
        public void QuoteAcceptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uuid = null;
            //var response = instance.QuoteAccept(uuid);
            //Assert.IsInstanceOf(typeof(AcceptedQuote), response, "response is AcceptedQuote");
        }
        
        /// <summary>
        /// Test QuoteCreate
        /// </summary>
        [Test]
        public void QuoteCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? estimate = null;
            //QuoteRequest quoteRequest = null;
            //var response = instance.QuoteCreate(estimate, quoteRequest);
            //Assert.IsInstanceOf(typeof(Quote), response, "response is Quote");
        }
        
        /// <summary>
        /// Test QuoteList
        /// </summary>
        [Test]
        public void QuoteListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string merchantId = null;
            //var response = instance.QuoteList(merchantId);
            //Assert.IsInstanceOf(typeof(List<Quote>), response, "response is List<Quote>");
        }
        
        /// <summary>
        /// Test QuoteRead
        /// </summary>
        [Test]
        public void QuoteReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uuid = null;
            //var response = instance.QuoteRead(uuid);
            //Assert.IsInstanceOf(typeof(Quote), response, "response is Quote");
        }
        
    }

}
